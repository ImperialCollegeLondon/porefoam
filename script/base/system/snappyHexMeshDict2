//----------------------------- -*- C++ -*- ---------------------------.
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      snappyHexMeshDict;
}
//----------------------------------------------------------------------

// Which of the steps to run
castellatedMesh true;
snap            true;
addLayers       false;


//Optional: single region surfaces get patch names according to
//          surface only. Multi-region surfaces get patch name
//          surface "_ "region. Default is true
//singleRegionName false;

// Optional: avoid patch-face merging. Allows mesh to be used for
//           refinement/unrefinement
//mergePatchFaces    off; // default on

// Geometry. Definition of all surfaces. All surfaces are of class
// searchableSurface.
// Surfaces are used
// - to specify refinement for any mesh cell intersecting it
// - to specify refinement for any mesh cell inside/outside/near
// - to 'snap' the mesh boundary to the surface
geometry
{

    solidwalls.obj
    {
        type triSurfaceMesh;
        name Grainwalls;
        //tolerance   1E-5;   // optional:non-default tolerance on intersections
        //maxTreeDepth 10;    // optional:depth of octree. Decrease only in case
                              // of memory limitations.

    }



    //- Refine a bit extra around the small centre hole
    //boundingBox
    //{
        //type searchableBox;
        //min (-1000 -1000 -1000);
        //max (10000 10000 10000);
    //}
};


// Settings for the castellatedMesh generation.
castellatedMeshControls
{

    // Refinement parameters
    // ~~~~~~~~~~~~~~~~~~~~~

    // If local number of cells is >= maxLocalCells on any processor
    // switches from from refinement followed by balancing
    // (current method) to (weighted) balancing before refinement.
    maxLocalCells 10000000;

    // Overall cell limit (approximately). Refinement will stop immediately
    // upon reaching this number so a refinement level might not complete.
    // Note that this is the number of cells before removing the part which
    // is not 'visible' from the keepPoint. The final number of cells might
    // actually be a lot less.
    maxGlobalCells 500000000;

    // The surface refinement loop might spend lots of iterations refining just
    // a few cells. This setting will cause refinement to stop if
    // <= minimumRefine cells are selected for refinement. Note: it will
    // at least do one iteration (unless the number of cells to refine is 0)
    minRefinementCells 10;

    // Allow a certain level of imbalance during refining
    // (since balancing is quite expensive)
    // Expressed as fraction of perfect balance (= overall number of cells /
    // nProcs). 0=balance always.
    maxLoadUnbalance 0.10;

    // Number of buffer layers between different levels.
    // 1 means normal 2:1 refinement restriction, larger means slower
    // refinement.
    nCellsBetweenLevels 1;



    // Explicit feature edge refinement
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    // Specifies a level for any cell intersected by explicitly provided
    // edges.
    // This is a featureEdgeMesh, read from constant/triSurface for now.
    // Specify 'levels' in the same way as the 'distance' mode in the
    // refinementRegions (see below). The old specification
    //      level   2;
    // is equivalent to
    //      levels  ((0 2));

    features
    (
        {
            file "solidwalls.eMesh";
            levels ((3 1)(4 0));
        }
    );


    // Surface based refinement
    // ~~~~~~~~~~~~~~~~~~~~~~~~

    // Specifies two levels for every surface. The first is the minimum level,
    // every cell intersecting a surface gets refined up to the minimum level.
    // The second level is the maximum level. Cells that 'see' multiple
    // intersections where the intersections make an
    // angle > resolveFeatureAngle get refined up to the maximum level.

    refinementSurfaces
    {

        Grainwalls
        {
            // Surface-wise min and max refinement level
            level (0 1);
            // Optional region-wise level specification
        //    regions
         //   {
         //       secondSolid
          //      {
         //           level (3 3);
         //       }
         //   }

            // Optional specification of patch type (default is wall). No
            // constraint types (cyclic, symmetry) etc. are allowed.
          //  patchInfo
          //  {
           //     type patch;
           //     inGroups (meshedPatches);
           // }

            //- Optional increment (on top of max level) in small gaps
            //gapLevelIncrement 2;

            //- Optional angle to detect small-large cell situation
            //  perpendicular to the surface. Is the angle of face w.r.t.
            //  the local surface normal. Use on flat(ish) surfaces only.
            //  Otherwise leave out or set to negative number.
            //perpendicularAngle 10;

            //- Optional faceZone and (for closed surface) cellZone with
            //  how to select the cells that are in the cellZone
            //  (inside / outside / specified insidePoint)
            //  The orientation of the faceZone is
            //  - if on cellZone(s) : point out of (minimum) cellZone
            //  - if freestanding   : oriented according to surface

            //faceZone sphere;
            //cellZone sphere;
            //cellZoneInside inside;    // outside/insidePoint
            //insidePoint    (1 1 1);   // if (cellZoneInside == insidePoint)

            //- Optional specification of what to do with faceZone faces:
            //      internal : keep them as internal faces (default)
            //      baffle   : create baffles from them. This gives more
            //                 freedom in mesh motion
            //      boundary : create free-standing boundary faces (baffles
            //                 but without the shared points)
            //faceType baffle;
        }
    }

    // Feature angle:
    // - used if min and max refinement level of a surface differ
    // - used if feature snapping (see snapControls below) is used
    resolveFeatureAngle 75;

    //- Optional increment (on top of max level) in small gaps
    //gapLevelIncrement 2;


    // Planar angle:
    // - used to determine if surface normals
    //   are roughly the same or opposite. Used
    //      - in proximity refinement
    //      - to decide when to merge free-standing baffles
    //        (if e.g. running in surfaceSimplify mode set this to 180 to
    //         merge all baffles)
    //      - in snapping to avoid snapping to nearest on 'wrong' side
    //        of thin gap
    //
    // If not specified same as resolveFeatureAngle
    //planarAngle 180;


    // Region-wise refinement
    // ~~~~~~~~~~~~~~~~~~~~~~

    // Specifies refinement level for cells in relation to a surface. One of
    // three modes
    // - distance. 'levels' specifies per distance to the surface the
    //   wanted refinement level. The distances need to be specified in
    //   increasing order.
    // - inside. 'levels' is only one entry and only the level is used. All
    //   cells inside the surface get refined up to the level. The surface
    //   needs to be closed for this to be possible.
    // - outside. Same but cells outside.

    refinementRegions
        // boundingBox
        // {
            // mode inside;
            // levels ((1000 0));
        // }
        //sphere.stl
        //{
        //    mode inside;
        //    levels ((1. 4));
        //    // Optional override of uniform refinement level such
        //    //  that in small gaps we're getting more cells.
        //    //  The specification is
        //    //  - numGapCells : minimum number of cells in the gap
        //    //  - minLevel    : min refinement level at which to kick in
        //    //  - maxLevel    : upper refinement level
        //    // All three settings can be overridden on a surface by
        //    // surface basis in the refinementSurfaces section.
        //    gapLevel (<numGapCells> <minLevel> <maxlevel>);
        //}
    }


    // Optionally limit refinement in geometric region. This limits all
    // refinement (from features, refinementSurfaces, refinementRegions)
    // in a given geometric region. The syntax is exactly the same as for the
    // refinementRegions; the cell level now specifies the upper limit
    // for any cell. Note that it does not override the refinement constraints
    // given by the nCellsBetweenLevels settting.
    limitRegions
    {
    }


    // Mesh selection
    // ~~~~~~~~~~~~~~

    // After refinement patches get added for all refinementSurfaces and
    // all cells intersecting the surfaces get put into these patches. The
    // section reachable from the location(s)InMesh is kept.
    // NOTE: This point should never be on a face, always inside a cell, even
    // after refinement.
    //
    // There are two different ways of specifying the regions to keep:
    // 1. a single locationInMesh. This is the unzoned part of the mesh.
    //    All the 'zoned' surfaces are marked as such
    //    in the refinementSurfaces with the faceZone and cellZone keywords.
    //    It is illegal to have the locationInMesh inside a surface for which
    //    a cellZone is specified.
    //
    // or
    //
    // 2. multiple locationsInMesh, with per location the name of the cellZone.
    //    This uses walking to determine zones and automatically creates
    //    faceZones on the outside of cellZones. The special name 'none' is
    //    used to indicate the unzoned/background part of the mesh.

        // Ad 1. Specify a single location and how to treat faces inbetween
        //       cellZones
    locationInMesh (0.5  0.5  0.5); // Inside point

        // Whether any faceZones (as specified in the refinementSurfaces)
        // are only on the boundary of corresponding cellZones.
        // Not used if there are no faceZones. The behaviour has changed
        // with respect to previous versions:
        //  true  : all intersections with surface are put in faceZone
        //          (same behaviour as before)
        //  false : depending on the type of surface intersected:
        //      - if intersecting surface has faceZone only (so no cellZone)
        //        leave in faceZone (so behave as if set to true) (= changed
        //        behaviour)
        //      - if intersecting surface has faceZone and cellZone
        //        remove if inbetween same cellZone or if on boundary
        //        (same behaviour as before)
        allowFreeStandingZoneFaces true;



        // 2. Specify multiple locations with optional cellZones for the
        //    regions (use cellZone "none" to specify the unzoned cells)
        //    FaceZones are automatically constructed from the
        //    names of the cellZones: <cellZoneA> _to_ <cellZoneB>
        //    where the cellZoneA is the lowest numbered cellZone (non-cellZone
        //    cells are in a special region called "none" which is always
        //    last).

        //locationsInMesh
        //(
            //((-0.09 -0.039 -0.049)  bottomAir)  // cellZone 0
            //((-0.09 0.009 -0.049)   topAir)     // cellZone 1
            //((-0.09 0.001 -0.049)   leftSolid)  // cellZone 2
           // ((0.02  0.001 -0.049)   rightSolid) // cellZone 3
           // ((-0.001 -0.039 0.0015) heater)     // cellZone 4
        //);

        // Per synthesised faceZone name the faceType and type of baffles to
        // create
       // faceZoneControls
       // {
           // bottomAir_to_heater
           // {
             //   // Optional specification of patch type (default is wall). No
              //  // constraint types (cyclic, symmetry) etc. are allowed.
              //  patchInfo
              //  {
              //      type patch;
              //      inGroups (patchPatches);
              //  }
              //  faceType baffle;
          //  }
      //  }



   // // Optional locations that should not be reachable from
   // // location(s)InMesh
    // locationsOutsideMesh ((100 100 100));

    // Optional: do not remove cells likely to give snapping problems
    // handleSnapProblems false;

    // Optional: switch off topological test for cells to-be-squashed
    //           and use geometric test instead
    //useTopologicalSnapDetection false;

    // Optional: do not refine surface cells with opposite faces of
    //           differing refinement levels
    //interfaceRefine false;
}

// Settings for the snapping.
snapControls
{
    // Number of patch smoothing iterations before finding correspondence
    // to surface
    nSmoothPatch 0;

    // Optional: number of smoothing iterations for internal points on
    // refinement interfaces. This will reduce non-orthogonality on
    // refinement interfaces.
    //nSmoothInternal $nSmoothPatch;

    // Maximum relative distance for points to be attracted by surface.
    // True distance is this factor times local maximum edge length.
    tolerance 3.;

    // Number of mesh displacement relaxation iterations.
    nSolveIter 10;

    // Maximum number of snapping relaxation iterations. Should stop
    // before upon reaching a correct mesh.
    nRelaxIter 5;

    // (wip) disable snapping to opposite near surfaces (revert to 22x
    //  behaviour)
    // detectNearSurfacesSnap false;


    // Feature snapping

        // Number of feature edge snapping iterations.
        // Leave out altogether to disable.
        nFeatureSnapIter 5;

        // Detect (geometric only) features by sampling the surface
        // (default=false).
        implicitFeatureSnap false;

        // Use castellatedMeshControls::features (default = true)
        explicitFeatureSnap true;

        // Detect features between multiple surfaces
        // (only for explicitFeatureSnap, default = false)
        multiRegionFeatureSnap false;


        //- When to run face splitting (never at first iteration, always
        //  at last iteration). Is interval. Default -1 (disabled)
        //nFaceSplitInterval 5;


        // (wip) Optional for explicit feature snapping:
        //- Detect baffle edges. Default is true.
        //detectBaffles false;
        //- Erase attraction close to feature point. Default is false.
        releasePoints true;
        //- Walk along feature edges, adding missing ones. Default is true.
        //stringFeatures false;
        //- If diagonal attraction also attract other face points. Default is
        //  false
        //avoidDiagonal true;
        //- When splitting what concave faces to leave intact. Default is 45
        //  degrees.
        //concaveAngle 30;
        //- When splitting the minimum area ratio of faces. If face split
        //  causes ratio of area less than this do not split. Default is 0.3
        //minAreaRatio 0.3;

}

// Settings for the layer addition.
addLayersControls
{
    // Are the thickness parameters below relative to the undistorted
    // size of the refined cell outside layer (true) or absolute sizes (false).
    relativeSizes true;

    // Layer thickness specification. This can be specified in one of following
    // ways:
    // - expansionRatio and finalLayerThickness (cell nearest internal mesh)
    // - expansionRatio and firstLayerThickness (cell on surface)
    // - overall thickness and firstLayerThickness
    // - overall thickness and finalLayerThickness
    // - overall thickness and expansionRatio
    //
    // Note: the mode thus selected is global, i.e. one cannot override the
    //       mode on a per-patch basis (only the values can be overridden)

        // Expansion factor for layer mesh
        expansionRatio 1.;

        // Wanted thickness of the layer furthest away from the wall.
        // If relativeSizes this is relative to undistorted size of cell
        // outside layer.
        finalLayerThickness 0.5;

        // Wanted thickness of the layer next to the wall.
        // If relativeSizes this is relative to undistorted size of cell
        // outside layer.
        //firstLayerThickness 0.3;

        // Wanted overall thickness of layers.
        // If relativeSizes this is relative to undistorted size of cell
        // outside layer.
        //thickness 0.5


    // Minimum overall thickness of total layers. If for any reason layer
    // cannot be above minThickness do not add layer.
    // If relativeSizes this is relative to undistorted size of cell
    // outside layer..
    minThickness 0.1;


    // Per final patch or faceZone (so not geometry!) the layer information
    // Note: This behaviour changed after 21x. Any non-mentioned patches
    //       now slide unless:
    //          - nSurfaceLayers is explicitly mentioned to be 0.
    //          - angle to nearest surface < slipFeatureAngle (see below)
    layers
    {
        "Grainwalls"
        {
            nSurfaceLayers 1;

        }
        maxY
        {
            nSurfaceLayers 1;
            // Per patch layer data
            expansionRatio      1.3;
            finalLayerThickness 0.3;
            minThickness        0.1;
        }

        // Disable any mesh shrinking and layer addition on any point of
        // a patch by setting nSurfaceLayers to 0
        frozenPatches
        {
            nSurfaceLayers 0;
        }
    }

    // If points get not extruded do nGrow layers of connected faces that are
    // also not grown. This helps convergence of the layer addition process
    // close to features.
    // Note: changed(corrected) w.r.t 17x! (didn't do anything in 17x)
    nGrow 0;

    // Advanced settings


    // Static analysis of starting mesh

        // When not to extrude surface. 0 is flat surface, 90 is when two faces
        // are perpendicular
        featureAngle 130;

        // When to merge patch faces. Default is featureAngle. Useful when
        // featureAngle is large.
        mergePatchFacesAngle 110;

        // Stop layer growth on highly warped cells
        maxFaceThicknessRatio 0.5;


    // Patch displacement

        // Number of smoothing iterations of surface normals
        nSmoothSurfaceNormals 2;

        // Smooth layer thickness over surface patches
        nSmoothThickness 10;



    // Choice of mesh shrinking algorithm

        // Optional mesh shrinking algorithm (default is displacementMedialAxis)
        // The displacementMotionSolver is a wrapper around the displacement
        // motion solvers. It needs specification of the solver to use and
        // its control dictionary.
        //meshShrinker displacementMotionSolver;
        //solver displacementLaplacian;
        //displacementLaplacianCoeffs
        //{
        //    diffusivity quadratic inverseDistance
        //    (
        //        sphere.stl_firstSolid
        //        maxY
        //    );
        //}


    // Medial axis analysis (for use with default displacementMedialAxis)

        // Angle used to pick up medial axis points
        // Note: changed(corrected) w.r.t 17x! 90 degrees corresponds to 130
        // in 17x.
        minMedialAxisAngle 90;

        // Reduce layer growth where ratio thickness to medial
        // distance is large
        maxThicknessToMedialRatio 0.3;

        // Number of smoothing iterations of interior mesh movement direction
        nSmoothNormals 3;

        // Optional: limit the number of steps walking away from the surface.
        // Default is unlimited.
        //nMedialAxisIter 10;

        // Optional: smooth displacement after medial axis determination.
        // default is 0.
        //nSmoothDisplacement 90;

        // (wip)Optional: do not extrude any point where
        //   (false) : all surrounding faces are not fully extruded
        //   (true)  : all surrounding points are not extruded
        // Default is false.
        //detectExtrusionIsland true;

        // Optional: at non-patched sides allow mesh to slip if extrusion
        // direction makes angle larger than slipFeatureAngle. Default is
        // 0.5*featureAngle.
        slipFeatureAngle 30;

        // Maximum number of snapping relaxation iterations. Should stop
        // before upon reaching a correct mesh.
        nRelaxIter 5;


    // Mesh shrinking

        // Create buffer region for new layer terminations, i.e. gradually
        // step down number of layers. Set to <0 to terminate layer in one go.
        nBufferCellsNoExtrude 0;

        // Overall max number of layer addition iterations. The mesher will
        // exit if it reaches this number of iterations; possibly with an
        // illegal mesh.
        nLayerIter 50;

        // Max number of iterations after which relaxed meshQuality controls
        // get used. Up to nRelaxedIter it uses the settings in
        // meshQualityControls,
        // after nRelaxedIter it uses the values in
        // meshQualityControls::relaxed.
        nRelaxedIter 20;

        // Additional reporting: if there are just a few faces where there
        // are mesh errors (after adding the layers) print their face centres.
        // This helps in tracking down problematic mesh areas.
        //additionalReporting true;
}

// Generic mesh quality settings. At any undoable phase these determine
// where to undo.
meshQualityControls
{
    // Specify mesh quality constraints in separate dictionary so can
    // be reused (e.g. checkMesh -meshQuality)
    #include "meshQualityDict"


    // Optional : some meshing phases allow usage of relaxed rules.
    // See e.g. addLayersControls::nRelaxedIter.
    relaxed
    {
        // Maximum non-orthogonality allowed. Set to 180 to disable.
        maxNonOrtho 75;
    }


    // Advanced

        // Number of error distribution iterations
        nSmoothScale 4;
        // amount to scale back displacement at error points
        errorReduction 0.75;
}

// Advanced

//// Debug flags
//debugFlags
//(
//    mesh            // write intermediate meshes
//    intersections   // write current mesh intersections as .obj files
//    featureSeeds    // write information about explicit feature edge
//                    // refinement
//    attraction      // write attraction as .obj files
//    layerInfo       // write information about layers
//);
//
//// Write flags
//writeFlags
//(
//    scalarLevels    // write volScalarField with cellLevel for postprocessing
//    layerSets       // write cellSets, faceSets of faces in layer
//    layerFields     // write volScalarField for layer coverage
//);

// Merge tolerance. Is fraction of overall bounding box of initial mesh.
// Note: the write tolerance needs to be higher than this.
mergeTolerance 1e-6;
debug    1;

//---------------------------------------------------------------------'
