#!/bin/bash
# prepare two-phase flow mesh (first run) and input files, decompose and
# run, on a micro-CT image with a separate .mhd header

######################### MAIN INPUT PARAMETERS #############################

# contact angle for drainage measured through phase 1 (oil)
: ${theta0s:="140"}
: ${thetaIn:=90}
: ${thetaOut:=90}
: ${pdMeanValue1:=0}
: ${pdMeanValue2:=0}

# Inlet BCs, Darcy velocity (um/s) for oil phase:
: ${UD1s:=" 200 "}

# Inlet BCs, Darcy velocity (um/s) for water phase:
: ${UD0s:="10"}

# Used if oilFilldFracs<0, initialize from VSubElems image
: ${VSElml:=alpha1.mhd}


# fill a small portion of the image near the inlet with oil (onjecting phase)
# give up to two numbers one <1 and the other >1, negatives will be skiped
: ${oilFilldFracs:=" 0.05"} #  1.05 # set to =-1 to initialize alph from alpha1.mhd

# In case you want to refine the mesh increase this, or vise-versa.
: ${RefineLevel:=1}

# number of processors used for flow simulation
: ${nProc:=24}


# tag mesh or decomposed/simulation case
: ${meshTag:=""}
: ${caseTag:=""}

# cfmesh tag, in base/system/meshdict.cfMesh
: ${cfMshTg:="cfMesh"}
: ${smoothMeshNIter:=0}
: ${smoothMeshBoundary:=yes}
: ${smoothMeshInternal:=yes}
: ${smoothMeshRelax:=0.1}




# Notes on selection of parameters:
# for CCF pcThicknessFactor~0.1, for FSF  pcThicknessFactor~0.6
# for coarse meshes FSF is more stable, for high-res cases CCF is more accurate
# Drainage with low contact angles (CAw>140) is a tough job! (wetting films are left behind)
# Simulations become impractical if inlet velocity is less than ~5% of hains jumps velocity

# discretization parameters,
# refer to http://dx.doi.org/10.1016/j.jcp.2012.04.011 for further information:
: ${surfaceForceModel:=CCF}
: ${pcThicknessFactor:=0.1}
: ${cAlpha:=1.}
: ${fcCorrectTangent:=0.05}
: ${smoothingKernel:=2}
: ${smoothingRelaxFactor:=0.95}
: ${wallSmoothingKernel:=2}
: ${fcdFilter:=0.01}
: ${maxDeltaT:=1e-5}
: ${maxAlphaCo:=30}
: ${endTime:=0.2}


# Everything set, now do the hard work:
#############################################################################



#set -x


if [ -n "$1" ]; then
    dataFiles=$1
else
    dataFiles=$(ls *.mhd)
fi





echo "______________________________________________________________________"




# Check porefoam installation
if ! [ -n "$msSrc" ]; then
	guessPsDIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )/../.." && pwd )
	if [ -f $guessPsDIR/script/bashrc ]; then
		echo " msSrc is not not set, set it by running (or add to your ~/.bashrc file):"
		echo "source $guessPsDIR/script/bashrc"; echo
		source $guessPsDIR/script/bashrc
	else
		echo "Error: msSrc is not not set.";
		echo " please set them first following the documentation, maybe by typing:"
		echo "source ~/works/src/script/bashrc"
		exit 1
	fi
fi

# Copy this script to local (PWD) folder for user edit
scriptName=`basename "${BASH_SOURCE[0]}"`
scriptDir=$( cd "$( dirname "${BASH_SOURCE[0]}" )/" && pwd )
if ! [ -f $scriptName ]; then
	cp  "${BASH_SOURCE[0]}" ./
	sed -i s:'^[ \t]*'"guessPsDIR=".*:"	guessPsDIR=$msSrc": ./$scriptName
	echo "please edit the input parameters in file $PWD/$scriptName and run:"
	echo "./$scriptName $@"
	exit
fi




. $msSrc/script/initbash
basedir=$msSrc/porefoam2f/script/base
basedirExtra=$msSrc/porefoam2f/script/baseExtra



# number of processors used for mesh-generation - deactivated
# nProcSHM=8

# Skip meshing near the boundaries of the image to facilitate mesh
# generation. The value for this keyword is the distance (in
# voxels) to the image boundaries which will be skipped
 nSkip=0


inlet=Left
outlet=Right


echo "cAlpha $cAlpha"
echo "pcThicknessFactor $pcThicknessFactor"
echo "fcCorrectTangent $fcCorrectTangent"
echo "surfaceForceModel $surfaceForceModel"
echo "smoothingKernel $smoothingKernel  %10!"
echo "fcdFilter $fcdFilter"
echo "maxDeltaT $maxDeltaT"
echo "wallSmoothingKernel $wallSmoothingKernel"

echo "          UD1s: $UD1s"
echo "          UD0s: $UD0s"
echo "          dataFiles: $dataFiles"


endTimeTP=$endTime;
for dataFile in $dataFiles ; do
echo "_________________________ $dataFile  ____________________________"

  dataFile=${dataFile%.mhd}
  if ! [ -f $dataFile.mhd ] ; then    echo  "Error: file $dataFile.mhd  not found";    exit;  fi


  mshDir=${dataFile%.*}$meshTag
  echo; echo "$mshDir"

# GENERATE MESH ========================================================================
  if ! [ -f $mshDir/constant/polyMesh/points ]; then
	if ! [ -d $mshDir ]; then
		### First run: create mesh

		echo " ###########  createing mesh: $mshDir   ########## "

		cp -r $basedir $mshDir
		cp  postProcessDict_${dataFile%.*}  $mshDir/system/postProcessDict


		cp "$dataFile".mhd  $mshDir/"$dataFile"_input.mhd # for future reference
		sed -i 's/ElementDataFile[ \t]*=[ \t]*/ElementDataFile = ..\//'  $mshDir/${dataFile}_input.mhd
		sed -i 's/\(ElementDataFile.*\)/\1\nUnit = 1e6 /'  $mshDir/${dataFile}_input.mhd #  @scale for snappyHexMesh
		(cd $mshDir && runApp voxelImageProcess  "$dataFile"_input.mhd   "$mshDir.mhd" && mv log.voxelImageProcess log.voxelImageProcess- )
		#(cd $mshDir && RunUpdateBlockMeshDict ${mshDir}.mhd  2  $RefineLevel $nSkip )
		vxlSiz="$(cat $mshDir/$mshDir.mhd | grep ElementSize | sed -e 's/[\t ]/\n/g' | grep [0-9] | head -1 )" # note `more` doesn't work, breaks piping
		echo vxlSiz $vxlSiz


		echo " ---- create surface ----  "
		setValues BASENAME "$mshDir" $mshDir/system/meshingDict
		#(cd $mshDir && runApp voxelToSurface  )
		printf "\n extractBoxBoundary true\n\n" >> $mshDir/${dataFile}_input.mhd
		(cd $mshDir && runApp vxlToSurf  ${dataFile}_input.mhd  ${dataFile}.obj  )
		(cd $mshDir && runApp surfaceAutoPatch ${dataFile}0.obj solidwalls.stl   100 )
		#(cd $mshDir && runApp surfaceSmoothVP )
		echo "$mshDir/constant/ : ";	(cd $mshDir && ls *.obj )
		#(cd $mshDir && runApp voxelToFoamPar  ${mshDir}.mhd 1 1 1 F)
		echo " ------------------------  "


		(cd $mshDir/system && mv meshDict.$cfMshTg meshDict )
		setKeywordValues maxCellSize "$(calc $vxlSiz/$RefineLevel)" $mshDir/system/meshDict
		setKeywordValues nLayers "2" $mshDir/system/meshDict
		setKeywordValues stopAfter "end" $mshDir/system/meshDict
		(cd $mshDir && runApp cartesianMesh && mv log.cartesianMesh log.cartesianMesh-1)
		(cd $mshDir && runApp ofMesh2Voxel && mv log.ofMesh2Voxel log.ofMesh2Voxel-)
		(cd $mshDir && runApp voxelImageProcess vxlImage.mhd "$mshDir.mhd")
		#(cd $mshDir && runApp  meshAddFaceLayer is not roboust )


		checkM() { (runApp -l log.checkMesh-$1 checkMesh &&  grep -e 'non-orthogonality Max' log.checkMesh-$1 | sed 's/Threshold.*//'); }

		(cd $mshDir && checkM 1)

		echo "smoothMesh NIter:$smoothMeshNIter,  Boundary:$smoothMeshBoundary,  Internal:$smoothMeshInternal, Relax:$smoothMeshRelax"
		for ((ii = 1 ; ii <= $smoothMeshNIter ; ii++)); do
			echo Mesh smoothing iteraton $ii, not usefull in anisotropic meshes
			if [ "$smoothMeshBoundary" == yes ]; then
				(cd $mshDir && runApp -l log.smoothMesh-$ii.0 smoothMesh $smoothMeshRelax 10 1 27 && checkM $ii.0); fi
			if [ "$smoothMeshInternal" == yes ]; then
				(cd $mshDir && runApp -l log.smoothMesh-$ii.1 smoothMesh $smoothMeshRelax 10 4 27 && checkM $ii.1); fi
		done



		setKeywordValues method scotch ./$mshDir/system/decomposeParDict





		setBoundaryCondition Grainwalls "type" "wall" ./$mshDir/constant/polyMesh/boundary

		(cd $mshDir && runApp renumberMesh -overwrite)
		(cd $mshDir && runApp checkMesh)

		#(cd $mshDir && runApp compactFaceToFace)

		(cd $mshDir && RunRemoveExtras)

		(cd $mshDir && touch $(echo ${mshDir//\//-}).foam)
		setKeywordValues cAlpha $cAlpha ./$mshDir/system/fvSolution
		setKeywordValues pcThicknessFactor $pcThicknessFactor ./$mshDir/system/fvSolution
		setKeywordValues surfaceForceModel $surfaceForceModel ./$mshDir/system/fvSolution
		setKeywordValues fcCorrectTangent $fcCorrectTangent ./$mshDir/system/fvSolution
		setKeywordValues smoothingKernel $smoothingKernel ./$mshDir/system/fvSolution
		setKeywordValues smoothingRelaxFactor $smoothingRelaxFactor ./$mshDir/system/fvSolution
		setKeywordValues wallSmoothingKernel $wallSmoothingKernel ./$mshDir/system/fvSolution
		setKeywordValues fcdFilter $fcdFilter ./$mshDir/system/fvSolution
		setKeywordValues maxDeltaT $maxDeltaT ./$mshDir/system/controlDict
		setKeywordValues endTime $endTime ./$mshDir/system/controlDict


		#(cd $mshDir && runApp ofMesh2Voxel)

		#printf "\ntitle $mshDir;\n" >> $mshDir/vxlImage.mhd
		#echo "write_subElements true;" >> $mshDir/vxlImage.mhd
		#echo "write_elements true;" >> $mshDir/vxlImage.mhd
		#echo "write_cnm true; " >> $mshDir/vxlImage.mhd
		#(cd $mshDir && runApp gnextract vxlImage.mhd)

	else
		echo "Error: mesh folder exists but mesh is not there, remove $PWD/$mshDir and rerun to regenerate"
	fi

 else

# DECOMPOSE MESH AND RUN SIM ========================================================================

  for UD1 in $UD1s; do
  for UD0 in $UD0s; do
  for theta0 in $theta0s; do
	echo "          UD1: $UD1"
	thetaA=$theta0
	thetaR=$theta0
	echo "theta0 $theta0"

	for oilFilldFrac in $oilFilldFracs ; do
		echo "oilFilldFrac:  $oilFilldFrac"
		runDir=${mshDir}${caseTag}_Uo${UD1}w${UD0}CAw${theta0} #_l$VSElml
		maxS1=0.999
		minS1=0.001
		endTime=$endTimeTP
		if (( $(echo "$oilFilldFrac > 1." | bc ) )); then
		   runDir=${mshDir}_SP  # single-phase flow
		   echo "oilFilldFrac $oilFilldFrac, -> singlephase :   caseTag $caseTag"
		   endTime=0.005
		   maxS1=1.999
		   minS1=-0.001
		fi

		# for nProc in $nProcs  ; do

		echo " ###########  Preparing parallel case : $runDir   ########## "
		echo " number of processors:  ${nProc}"
		echo " Darcy velocity:  $UD1"

# DECOMPOSE MESH   ========================================================================
		if ! [ -d $runDir ]; then
		 if ! [ -f $runDir/constant/polyMesh/points ]; then

			#echo ". $poreFoamBashrc"
			#. $poreFoamBashrc 1




			mkdir $runDir
			cp -r $mshDir/0  $runDir/
			cp -r $mshDir/constant  $runDir/
			cp -r $mshDir/system  $runDir/
			touch $runDir/$runDir.foam
			(cd $runDir && runApp transformPoints -scale "(1e-6 1e-6 1e-6)" ) # #scale back
			(cd $runDir && runApp checkMesh)


			setKeywordValues maxS1   "$maxS1"  ./$runDir/system/controlDict
			setKeywordValues minS1   "$minS1"  ./$runDir/system/controlDict

			setKeywordValues writeFormat ascii ./$runDir/system/controlDict

			setKeywordValues cAlpha $cAlpha ./$runDir/system/fvSolution
			setKeywordValues pcThicknessFactor $pcThicknessFactor ./$runDir/system/fvSolution
			setKeywordValues surfaceForceModel $surfaceForceModel ./$runDir/system/fvSolution
			setKeywordValues fcCorrectTangent $fcCorrectTangent ./$runDir/system/fvSolution
			setKeywordValues smoothingKernel $smoothingKernel ./$runDir/system/fvSolution
			setKeywordValues smoothingRelaxFactor $smoothingRelaxFactor ./$runDir/system/fvSolution
			setKeywordValues wallSmoothingKernel $wallSmoothingKernel ./$runDir/system/fvSolution
			setKeywordValues fcdFilter $fcdFilter ./$runDir/system/fvSolution
			setKeywordValues maxDeltaT $maxDeltaT ./$runDir/system/controlDict
			setKeywordValues maxAlphaCo $maxAlphaCo ./$runDir/system/controlDict
			setKeywordValues endTime $endTime ./$runDir/system/controlDict


			boundingBox=$(cat ./$runDir/log.checkMesh | grep ound | grep box | sed 's:[a-zA-Z][a-zA-Z][a-zA-Z]*::g' \
			                  | sed 's:[\(\)]::g' |  sed 's:[eE]:\*10\^:g' | sed -e 's:[\t ][\t ]*:\n:g')
			boundingBox=($boundingBox)
			echo "UD1: $UD1,   boundingBox:  ${boundingBox[*]}"
			QOil=$(echo "scale=18; (${boundingBox[4]}-(${boundingBox[1]}))*(${boundingBox[5]}-(${boundingBox[2]}))*$UD1*0.000001" | bc )
			QWat=$(echo "scale=18; (${boundingBox[4]}-(${boundingBox[1]}))*(${boundingBox[5]}-(${boundingBox[2]}))*$UD0*0.000001" | bc )
			#QWat=$(echo "scale=18; $UD0Ratio*$QOil" | bc )
			echo "QOil: $QOil, QWat: $QWat,  "

			setBoundaryCondition $inlet "flowRate1" "$QOil" ./$runDir/0/U
			setBoundaryCondition $inlet "flowRate0" "$QWat" ./$runDir/0/U
			setBoundaryCondition $outlet "meanValue1" "$pdMeanValue1" ./$runDir/0/pd
			setBoundaryCondition $outlet "meanValue2" "$pdMeanValue2" ./$runDir/0/pd
			setBoundaryCondition Grainwalls theta0 $theta0 ./$runDir/0/alpha1
			setBoundaryCondition Grainwalls thetaR $thetaR ./$runDir/0/alpha1
			setBoundaryCondition Grainwalls thetaA $thetaA ./$runDir/0/alpha1
			setBoundaryCondition Grainwalls theta  "          theta [ 0 0 0 0 0 0 0 ] $theta0" ./$runDir/constant/transportProperties

			setBoundaryCondition $inlet  theta0 $thetaIn  ./$runDir/0/alpha1
			setBoundaryCondition $outlet theta0 $thetaOut ./$runDir/0/alpha1


			if (( $(echo "$oilFilldFrac < 0." | bc ) )); then
			 if [ "$VSElml" == "alpha1.mhd" ] ; then
				cp -r alpha1.* $runDir/
				(cd $runDir && runApp  voxelAlphaFieldToFoam alpha1.mhd -nGrowAlpha 0)   #-invertAlpha
			 else
				echo '"$VSElml" != "alpha1.mhd" requires (closed-source) gnextract outputs'
				vxlSElems=${mshDir}_VSubElems
				cp -r $mshDir/$vxlSElems$VSElml.$ImgSufix $runDir/
				cp -r $mshDir/${vxlSElems}0.mhd  $runDir/${vxlSElems}$VSElml.mhd
				replaceValues "_VSubElems0" "_VSubElems$VSElml"   $runDir/${vxlSElems}$VSElml.mhd
				echo  "threshold 120 200"  >> $runDir/${vxlSElems}$VSElml.mhd
				(cd $runDir && runApp  voxelImageProcess ${vxlSElems}$VSElml.mhd alpha1.mhd UChar)
				(cd $runDir && runApp  voxelAlphaFieldToFoam alpha1.mhd -nGrowAlpha 0)   #-invertAlpha
			 fi
			else
				xInitAlpha=$(echo "scale=10; ${boundingBox[0]}+(${boundingBox[3]}-(${boundingBox[0]}))*$oilFilldFrac" | bc )
				echo "xInitAlpha $xInitAlpha"
				setKeywordValues box  "    (-1. -1. -1.) ($xInitAlpha 1000 1000);" ./$runDir/system/setFieldsDict
				(cd $runDir && rm -f log.setFields)
				(cd $runDir && runApp setFields)
			fi



			setKeywordValues numberOfSubdomains $nProc ./$runDir/system/decomposeParDict

			#if [ -f $basedirExtra/system/decomposeParDict.$nProc ] ; then
				#(cd $runDir/system &&  cp $basedirExtra/system/decomposeParDict.$nProc decomposeParDict)
			#else
				echo " Decomposing mesh using single-level scotch algorithm."
			#fi

			(cd $runDir &&  runApp decomposePar)
			(cd $runDir &&  mv -f log.renumberMesh log.renumberMeshSerial )
			(cd $runDir &&  runMPI renumberMesh $nProc -overwrite)
			#(cd $runDir &&  rm -f log.compactFaceToFace )
			#(cd $runDir &&  runMPI compactFaceToFace $nProc )


			sed -i 's/fixedFluxPressure;/fixedFluxPressure;\n        adjoint no;/' ./$runDir/processor*/0/pd


			setKeywordValues writeFormat binary ./$runDir/system/controlDict
		 else
			echo "Error: $runDir/constant/polyMesh/points missing, mesh is not available or not decomposed properly"
		 fi
		else
# RUN SIMULATION   ========================================================================

			application=interFaceFoam

			echo " ###########  Running simulation on $runDir  ########## "
			echo "two-phase flow solver: $(which $application)"


			if [ -f "$(which $application)" ]; then
			if [ -f $runDir/log.$application ]; then
					printf "\nlog.$application exists, press Ctrl-c to stop the new run / make a back up\n"
				sleep 2
				prevRunDate=$(stat -c %y $runDir/log.$application | sed 's/[ :]/-/g' | sed 's/[.+].*//g')
				(cd $runDir && mv  log.$application log.$application$prevRunDate )
				sleep 0.5
		   fi

			(cd $runDir && runMPI  $application $nProc )
			else printf "\n\nError $application not found\n\nPATH:$PATH\npsSRC:$psSRC\n\n"
			fi
		fi

	done
  done
  done
  done
 fi

 echo "____________________________  end    ____________________________"

done

echo "______________________________________________________________________"
