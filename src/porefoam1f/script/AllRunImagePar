#!/bin/bash

export scriptName=`basename "${BASH_SOURCE[0]}"`
usage()
{
	echo "usage:"
	echo ;  echo "$scriptName \"*.mhd\"  \"X\" .raw.gz";  echo
	echo "Arguments (all optional):"
	echo "  arg1: name of images to run flow simulations on (defaults is *.mhd)"
	echo "  arg2: flow direction(s):  any combination of X Y Z"
	echo "  arg3: image output format: \".dat\", \".raw\", \".raw.gz\", \".tif\" (default), "
	echo "        or \"oldAscii\" (for compatibility with old codes)" 
	echo ""
	echo "Examples:" 
	echo "  export nProcX=3;  export nProcY=3;  export nProcZ=3    # optional " 
	echo "  export tag=''; export resetX0=False; export keepBCs=False; # optional " 
	echo "  export voxelCommands='pore 0 0\n' # optional commands  " 
	echo "  $scriptName \"\$(ls *.mhd)\"  X  .tif " 
	echo "  $scriptName \"Berea.mhd Ketton.mhd\"  \"X Y Z\"  .dat " 
	echo "  $scriptName \"\$(ls *.mhd)\"  Z  .raw.gz " 
	echo "" 
	echo "once the simulation is finished, you can run 'Ufraw2Uc ' to"
	echo "generate the voxel-centred velocities, or velocity magnitude," 
	echo "or convert to different file formats" 
}
if [ "$1" == "" ]; then usage; fi
if [ "$1" == "-h" ]; then usage; exit; fi
if [ "$1" == "--help" ]; then usage; exit; fi
if [ -n "$2" ]; then 
	for cas in $2 ; do 
		if [[ "$cas" != [XYZ] ]]; then echo "Error: \$2 ($2) can be X Y or Z only ";  exit; fi
	done
fi
echo $scriptName $@
echo



: ${nProcX:=3}
: ${nProcY:=2}
: ${nProcZ:=2}
echo "nProcessors: $nProcX x $nProcY x $nProcZ "

: ${resetX0:=False}
echo "resetX0: $resetX0 #keep/reset X0/Offset"
: ${keepBCs:=False}
echo "keepBCs: $keepBCs #keep/remove vv_* (slip) boundary conditions"
 

#dataFiles="Berea.mhd" 
if [ -n "$1" ]; then  dataFiles=$1
else                  dataFiles="$(ls *.mhd)"
fi
echo "Images: $dataFiles"

: ${directions:=$2}
: ${directions:=X}
  echo "flow directions=\"$directions\" "

: ${outPutFormat:=$3}
: ${outPutFormat:=raw.gz}
  echo "outPutFormat=\"$outPutFormat\" "

: ${detlaPs:="1"}
  echo "detlaPs=\"$detlaPs\" "


#~ maxDeltaT="2e-5"
endTime=.1



myCurrentDIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )/../.." && pwd )
: ${msSrc:=$myCurrentDIR} ; export msSrc
[ -n "$WM_PROJECT" ] || echo "WM_PROJECT not set, sourcing $msSrc/script/bashrc"
[ -n "$WM_PROJECT" ] || source $msSrc/script/bashrc

source $msSrc/script/initbash



for datFile in $dataFiles
do
dataFile=${datFile%.gz}
dataFile=${dataFile%.*}

prefix="$dataFile/"
mkdir $prefix


for direction in $directions
do
echo "direction $direction"

for p in $detlaPs
do
echo "p @ $direction : $p  Pa"

  caseName="$prefix$dataFile$tag-$p-$direction"
  if  ! [ -d $caseName ]; then 
	#~ LAM_MPI_SESSION_SUFFIX="$(echo $caseName | sed 's/\///g')"
	#~ echo $LAM_MPI_SESSION_SUFFIX
	#~ lamboot -v machines.txt 


	if [ -d ./base ]; then 
		cp -r ./base $caseName
	else
		cp -r $SP_SCRIPTS/base $caseName
	fi

	(cd $caseName/0 && mv p.$direction p)
	(cd $caseName/0 && rm p.*)
	(cd $caseName/0 && mv U.$direction U)
	(cd $caseName/0 && rm U.*)


	cpymhd=$caseName/${dataFile}_input.mhd

	if [ -f $dataFile.mhd ]; then 
	  cp $dataFile.mhd  $cpymhd
	  sed -i 's/^ElementDataFile[ \t]*=[ \t]*/ElementDataFile = ..\/..\//' $cpymhd
	elif [ -f $dataFile.nhdr ]; then 
	  echo "ObjectType =  Image" >   $cpymhd
	  echo "NDims =       3"     >>   $cpymhd
	  echo "ElementType = MET_UCHAR"  >>   $cpymhd
	  echo ""  >>   $cpymhd
	  tmpp=`more $dataFile.nhdr | grep sizes |  sed 's/sizes/ /'  |  sed 's/:/ /'`
	  echo $tmpp
	  echo "DimSize =  $tmpp" >>   $cpymhd
	  tmpp=$(more $dataFile.nhdr | grep directions |  sed 's/directions/ /' |  sed 's/space//'  |  sed 's/:/ /') 
	  echo $tmpp
	  echo  >>   $cpymhd
	  echo "ElementSize =  $tmpp" | sed 's/\,/ /g' | sed 's/)/ /g' | sed 's/(/ /g' | sed 's/ 0 / /g' | sed 's/ 0 / /g' >>   $cpymhd
	  echo "Offset = 0 0 0" >>   $cpymhd
	  echo ""  >>   $cpymhd
	  echo "ElementDataFile = ../../$datFile"  >>   $cpymhd
	  echo ""  >>   $cpymhd
	elif [ -f $dataFile.tif ] ||  [ -f $dataFile.am ] ; then 
	  echo "ObjectType =  Image" >   $cpymhd
	  echo "NDims =       3"     >>   $cpymhd
	  echo "ElementType = MET_UCHAR"  >>   $cpymhd	   
	  echo ""  >>   $cpymhd
	  echo "ElementDataFile = ../../$datFile"  >>   $cpymhd

	  echo "Please check the content of $cpymhd if not correct, provide "
	  echo "a similar but correct .mhd file in the current directory, i.e:"
	  echo " cp $cpymhd $caseName.mhd   &&   rm -r $caseName/"
	  echo "and try again if not correct"
	elif echo  "$cpymhd" | grep .*[0-9]*_[0-9]*_[0-9]*_.*; then
		echo "ElementDataFile =  NO_READ" >   $cpymhd
		echo "read ../../$datFile" >>   $cpymhd
	else
	  echo "can not find the file  $dataFile.mhd/.nhdr/.tif/.am"
	  exit
	fi

	if [ -n "$voxelCommands" ]; then 
		printf "\n\n$voxelCommands\n" >> $cpymhd
	fi


	(cd $caseName && runApp voxelToFoamPar  ${dataFile}_input.mhd $nProcX $nProcY $nProcZ $resetX0 $keepBCs)
	(cd $caseName &&  for processorDir in `ls -d processo*[0-9] 2>/dev/null` ; do  cp -r 0 "$processorDir" ;    done )
	nlProc=`cd $caseName && ls -d -1 processo*[0-9] 2>/dev/null | sed 's/processor//g' | sort -n -r | head -n 1`
	nProc=$[nlProc+1]
	echo nProc $nProc
	setKeywordValues numberOfSubdomains $nProc ./$caseName/system/decomposeParDict 
	setKeywordValues n "($nProcX $nProcY $nProcZ)" ./$caseName/system/decomposeParDict 



	(cd $caseName && touch ${caseName//\//-}.foam)



	setBoundaryCondition "$direction"  "value" "uniform  $p" ./$caseName/processor*/0/p 


	#(cd $caseName && runMPI redistributePar $nProc -overwrite)
	(cd $caseName && runMPI renumberMesh $nProc -overwrite)


	setKeywordValues endTime $endTime ./$caseName/system/controlDict 

	#setKeywordValues writeFormat ascii ./$caseName/system/controlDict 


	#setKeywordValues writeFormat binary ./$caseName/system/controlDict 

	setSubKeywordValues relaxationFactors "U" "0.5" ./$caseName/system/fvSolution

	setKeywordValues writeInterval 1000 ./$caseName/system/controlDict 
	echo "..................Running single phase flow code......................."

	#(cd $caseName && runMPI iPotentialFoam $nProc)

	[ -n "$skip_flow" ] || (cd $caseName && runMPI icoNSFoam $nProc)
	(cd $caseName && mv log.icoNSFoam log.icoNSFoam.1)

	#setSubKeywordValues relaxationFactors "U" "0.6" ./$caseName/system/fvSolution
	#setKeywordValues writeInterval 500 ./$caseName/system/controlDict 
	#(cd $caseName && runMPI icoNSFoam $nProc)
	#(cd $caseName && mv log.icoNSFoam log.icoNSFoam.2)


	#(cd $caseName && runMPI calc_perms $nProc)
	(cd $caseName && runMPI calc_distributions $nProc)

	(cd $caseName && runApp  FOAM2Voxel vxlImage.mhd "$nProc" "$outPutFormat" t)


	[ "$deleteOFRes" == "True" ] && (cd $caseName && rm -r processor*/)

	echo "..................            END              ......................."

	#~ lamhalt -d
   else
     echo "skipping $caseName"
   fi
done
done
done




