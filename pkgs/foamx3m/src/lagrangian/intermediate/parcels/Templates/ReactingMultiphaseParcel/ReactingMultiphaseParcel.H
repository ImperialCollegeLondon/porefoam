/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | foam-extend: Open Source CFD
   \\    /   O peration     | Version:     4.0
    \\  /    A nd           | Web:         http://www.foam-extend.org
     \\/     M anipulation  | For copyright notice see file Copyright
-------------------------------------------------------------------------------
License
	This file is part of foam-extend.

	foam-extend is free software: you can redistribute it and/or modify it
	under the terms of the GNU General Public License as published by the
	Free Software Foundation, either version 3 of the License, or (at your
	option) any later version.

	foam-extend is distributed in the hope that it will be useful, but
	WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with foam-extend.  If not, see <http://www.gnu.org/licenses/>.

Class
	Foam::ReactingMultiphaseParcel

Description
	Multiphase variant of the reacting parcel class with one/two-way coupling
	with the continuous phase.

SourceFiles
	ReactingMultiphaseParcelI.H
	ReactingMultiphaseParcel.C
	ReactingMultiphaseParcelIO.C

\*---------------------------------------------------------------------------*/

#ifndef ReactingMultiphaseParcel_H
#define ReactingMultiphaseParcel_H

#include "ReactingParcelTemplate.H"
#include "ReactingMultiphaseCloudTemplate.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

template<class ParcelType>
class ReactingMultiphaseParcel;

template<class ParcelType>
Ostream& operator<<
(
	Ostream&,
	const ReactingMultiphaseParcel<ParcelType>&
);


template<class ParcelType>
class ReactingMultiphaseParcel
:
	public ReactingParcel<ParcelType>
{
public:

	// IDs of phases in ReacingParcel phase list (Y)

		static const label GAS;
		static const label LIQ;
		static const label SLD;


	//- Class to hold reacting multiphase particle constant properties
	class constantProperties
	:
		public ReactingParcel<ParcelType>::constantProperties
	{
		// Private data

			//- Latent heat of devolatilisation [J/kg]
			const scalar LDevol_;

			//- Fraction of enthalpy retained by parcel due to surface
			//  reactions
			scalar hRetentionCoeff_;


	public:

		//- Constructor
		constantProperties(const dictionary& parentDict);

		// Access

			//- Return const access to the latent heat of devolatilisation
			inline scalar LDevol() const;

			//- Return const access to the fraction of enthalpy retained by
			//  parcel due to surface reactions
			inline scalar hRetentionCoeff() const;
	};


	//- Class used to pass reacting tracking data to the trackToFace function
	class trackData
	:
		public ReactingParcel<ParcelType>::trackData
	{
		// Private data

			//- Reference to the cloud containing this particle
			ReactingMultiphaseCloud<ParcelType>& cloud_;

			//- Particle constant properties
			const constantProperties& constProps_;


	public:

		// Constructors

			//- Construct from components
			inline trackData
			(
				ReactingMultiphaseCloud<ParcelType>& cloud,
				const constantProperties& constProps,
				const interpolation<scalar>& rhoInterp,
				const interpolation<vector>& UInterp,
				const interpolation<scalar>& muInterp,
				const interpolation<scalar>& TInterp,
				const interpolation<scalar>& CpInterp,
				const interpolation<scalar>& pInterp,
				const vector& g
			);


		// Member functions

			//- Return access to the owner cloud
			inline ReactingMultiphaseCloud<ParcelType>& cloud();

			//- Return const access to the constant properties
			inline const constantProperties& constProps() const;
	};


private:

	// Private member functions

		//- Return the mixture effective specific heat capacity
		template<class TrackData>
		scalar cpEff
		(
			TrackData& td,
			const scalar p,
			const scalar T,
			const label idG,
			const label idL,
			const label idS
		) const;

		//- Return the mixture effective enthalpy
		template<class TrackData>
		scalar HEff
		(
			TrackData& td,
			const scalar p,
			const scalar T,
			const label idG,
			const label idL,
			const label idS
		) const;

		//- Return the mixture effective latent heat
		template<class TrackData>
		scalar LEff
		(
			TrackData& td,
			const scalar p,
			const scalar T,
			const label idG,
			const label idL,
			const label idS
		) const;

		//- Update the mass fractions (Y, YGas, YLiquid, YSolid)
		scalar updateMassFractions
		(
			const scalar mass0,
			const scalarField& dMassGas,
			const scalarField& dMassLiquid,
			const scalarField& dMassSolid
		);


protected:

	// Protected data

		// Parcel properties

			//- Mass fractions of gases []
			scalarField YGas_;

			//- Mass fractions of liquids []
			scalarField YLiquid_;

			//- Mass fractions of solids []
			scalarField YSolid_;

			//- Flag to say that the particle is allowed to combust
			//  Only true after volatile content falls below threshold value
			bool canCombust_;


	// Protected member functions

		//- Calculate Devolatilisation
		template<class TrackData>
		void calcDevolatilisation
		(
			TrackData& td,
			const scalar dt,		   // timestep
			const scalar Ts,		   // Surface temperature
			const scalar d,			// diameter
			const scalar T,			// temperature
			const scalar mass,		 // mass
			const scalar mass0,		// mass (initial on injection)
			const label idVolatile,	// id of volatile phase
			const scalar YVolatileTot, // total volatile mass fraction
			const scalarField& YVolatile, // volatile component mass fractions
			bool& canCombust,		  // 'can combust' flag
			scalarField& dMassDV,	  // mass transfer - local to particle
			scalar& Sh,				// explicit particle enthalpy source
			scalar& N,				 // flux of species emitted from particle
			scalar& NCpW,			  // sum of N*Cp*W of emission species
			scalarField& Cs			// carrier conc. of emission species
		) const;

		//- Calculate surface reactions
		template<class TrackData>
		void calcSurfaceReactions
		(
			TrackData& td,
			const scalar dt,		   // timestep
			const label cellI,		 // owner cell
			const scalar d,			// diameter
			const scalar T,			// temperature
			const scalar mass,		 // mass
			const bool canCombust,	 // 'can combust' flag
			const scalar N,			// flux of species emitted from particle
			const scalarField& YMix,   // mixture mass fractions
			const scalarField& YGas,   // gas-phase mass fractions
			const scalarField& YLiquid,// liquid-phase mass fractions
			const scalarField& YSolid, // solid-phase mass fractions
			scalarField& dMassSRGas,   // gas-phase mass transfer - local
			scalarField& dMassSRLiquid,// liquid-phase mass transfer - local
			scalarField& dMassSRSolid, // solid-phase mass transfer - local
			scalarField& dMassSRCarrier, // carrier phase mass transfer
			scalar& Sh,				// explicit particle enthalpy source
			scalar& dhsTrans		   // sensible enthalpy transfer to carrier
		) const;


public:

	// Static data members

		//- String representation of properties
		static string propHeader;

		//- Runtime type information
		TypeName("ReactingMultiphaseParcel");


	friend class Cloud<ParcelType>;


	// Constructors

		//- Construct from owner, position, and cloud owner
		//  Other properties initialised as null
		inline ReactingMultiphaseParcel
		(
			ReactingMultiphaseCloud<ParcelType>& owner,
			const vector& position,
			const label cellI
		);


		//- Construct from components
		inline ReactingMultiphaseParcel
		(
			ReactingMultiphaseCloud<ParcelType>& owner,
			const vector& position,
			const label cellI,
			const label typeId,
			const scalar nParticle0,
			const scalar d0,
			const vector& U0,
			const scalarField& Y0,
			const scalarField& YGas0,
			const scalarField& YLiquid0,
			const scalarField& YSolid0,
			const constantProperties& constProps
		);

		//- Construct from Istream
		ReactingMultiphaseParcel
		(
			const Cloud<ParcelType>& c,
			Istream& is,
			bool readFields = true
		);

		//- Construct as a copy
		ReactingMultiphaseParcel(const ReactingMultiphaseParcel& p);

		//- Construct and return a clone
		autoPtr<ReactingMultiphaseParcel> clone() const
		{
			return
				autoPtr<ReactingMultiphaseParcel>
				(
					new ReactingMultiphaseParcel(*this)
				);
		}


	// Member Functions

		// Access

			//- Return const access to mass fractions of gases
			inline const scalarField& YGas() const;

			//- Return const access to mass fractions of liquids
			inline const scalarField& YLiquid() const;

			//- Return const access to mass fractions of solids
			inline const scalarField& YSolid() const;

			//- Return const access to the canCombust flag
			inline bool canCombust() const;


		// Edit

			//- Return access to mass fractions of gases
			inline scalarField& YGas();

			//- Return access to mass fractions of liquids
			inline scalarField& YLiquid();

			//- Return access to mass fractions of solids
			inline scalarField& YSolid();

			//- Return access to the canCombust flag
			inline bool& canCombust();


		// Main calculation loop

			//- Set cell values
			template<class TrackData>
			void setCellValues
			(
				TrackData& td,
				const scalar dt,
				const label cellI
			);

			//- Correct cell values using latest transfer information
			template<class TrackData>
			void cellValueSourceCorrection
			(
				TrackData& td,
				const scalar dt,
				const label cellI
			);

			//- Update parcel properties over the time interval
			template<class TrackData>
			void calc
			(
				TrackData& td,
				const scalar dt,
				const label cellI
			);


		// I-O

			//- Read
			static void readFields(Cloud<ParcelType>& c);

			//- Write
			static void writeFields(const Cloud<ParcelType>& c);


	// Ostream Operator

		friend Ostream& operator<< <ParcelType>
		(
			Ostream&,
			const ReactingMultiphaseParcel<ParcelType>&
		);
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#include "ReactingMultiphaseParcelI.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#ifdef NoRepository
	#include "ReactingMultiphaseParcel.C"
#endif

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
