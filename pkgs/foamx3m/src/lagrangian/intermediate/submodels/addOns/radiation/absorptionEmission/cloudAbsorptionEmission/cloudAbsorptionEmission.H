/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | foam-extend: Open Source CFD
   \\    /   O peration     | Version:     4.0
    \\  /    A nd           | Web:         http://www.foam-extend.org
     \\/     M anipulation  | For copyright notice see file Copyright
-------------------------------------------------------------------------------
License
	This file is part of foam-extend.

	foam-extend is free software: you can redistribute it and/or modify it
	under the terms of the GNU General Public License as published by the
	Free Software Foundation, either version 3 of the License, or (at your
	option) any later version.

	foam-extend is distributed in the hope that it will be useful, but
	WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with foam-extend.  If not, see <http://www.gnu.org/licenses/>.

Class
	Foam::radiation::cloudAbsorptionEmission

Description
	Retrieves absorption/emission data from a cloud object

SourceFiles
	cloudAbsorptionEmission.C

\*---------------------------------------------------------------------------*/

#ifndef radiationCloudAbsorptionEmission_H
#define radiationCloudAbsorptionEmission_H

#include "absorptionEmissionModel.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{
namespace radiation
{


class cloudAbsorptionEmission
:
	public absorptionEmissionModel
{
	// Private data

		//- Coefficients dictionary
		dictionary coeffsDict_;

		//- Cloud name(s)
		const wordList cloudNames_;


public:

	//- Runtime type information
	TypeName("cloudAbsorptionEmission");


	// Constructors

		//- Construct from components
		cloudAbsorptionEmission(const dictionary& dict, const fvMesh& mesh);


	// Destructor
	virtual ~cloudAbsorptionEmission();


	// Member Operators

		// Access

			// Absorption coefficient

				//- Absorption coefficient for dispersed phase
				virtual tmp<volScalarField> aDisp(const label bandI = 0) const;


			// Emission coefficient

				//- Emission coefficient for dispersed phase
				virtual tmp<volScalarField> eDisp(const label bandI = 0) const;


			// Emission contribution

				//- Return emission contribution for dispersed phase
				virtual tmp<volScalarField> EDisp(const label bandI = 0) const;
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace radiation
} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
