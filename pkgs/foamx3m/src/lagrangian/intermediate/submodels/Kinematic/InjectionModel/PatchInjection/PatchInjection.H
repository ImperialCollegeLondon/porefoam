/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | foam-extend: Open Source CFD
   \\    /   O peration     | Version:     4.0
    \\  /    A nd           | Web:         http://www.foam-extend.org
     \\/     M anipulation  | For copyright notice see file Copyright
-------------------------------------------------------------------------------
License
	This file is part of foam-extend.

	foam-extend is free software: you can redistribute it and/or modify it
	under the terms of the GNU General Public License as published by the
	Free Software Foundation, either version 3 of the License, or (at your
	option) any later version.

	foam-extend is distributed in the hope that it will be useful, but
	WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with foam-extend.  If not, see <http://www.gnu.org/licenses/>.

Class
	Foam::PatchInjection

Description
	Patch injection

	- User specifies
	  - Total mass to inject
	  - Name of patch
	  - Injection duration
	  - Initial parcel velocity
	  - Injection volume flow rate
	- Parcel diameters obtained by PDF model
	- Parcels injected at cell centres adjacent to patch

SourceFiles
	PatchInjection.C

\*---------------------------------------------------------------------------*/

#ifndef PatchInjection_H
#define PatchInjection_H

#include "InjectionModel.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

template<class Type>
class DataEntry;

class pdf;


template<class CloudType>
class PatchInjection
:
	public InjectionModel<CloudType>
{
	// Private data

		//- Name of patch
		const word patchName_;

		//- Injection duration [s]
		const scalar duration_;

		//- Number of parcels to introduce per second []
		const label parcelsPerSecond_;

		//- Initial parcel velocity [m/s]
		const vector U0_;

		//- Volume flow rate of parcels to introduce relative to SOI [m^3/s]
		const autoPtr<DataEntry<scalar> > volumeFlowRate_;

		//- Parcel size PDF model
		const autoPtr<pdf> parcelPDF_;

		//- Cell owners
		labelList cellOwners_;

		//- Fraction of injection controlled by this processor
		scalar fraction_;


protected:

	// Protected member functions

		//- Number of parcels to introduce over the time step relative to SOI
		label parcelsToInject
		(
			const scalar time0,
			const scalar time1
		) const;

		//- Volume of parcels to introduce over the time step relative to SOI
		scalar volumeToInject
		(
			const scalar time0,
			const scalar time1
		) const;


public:

	//- Runtime type information
	TypeName("PatchInjection");


	// Constructors

		//- Construct from dictionary
		PatchInjection
		(
			const dictionary& dict,
			CloudType& owner
		);


	//- Destructor
	virtual ~PatchInjection();


	// Member Functions

		//- Flag to indicate whether model activates injection model
		bool active() const;

		//- Return the end-of-injection time
		scalar timeEnd() const;


		// Injection geometry

			//- Set the injection position and owner cell
			virtual void setPositionAndCell
			(
				const label parcelI,
				const label nParcels,
				const scalar time,
				vector& position,
				label& cellOwner
			);

			virtual void setProperties
			(
				const label parcelI,
				const label nParcels,
				const scalar time,
				typename CloudType::parcelType& parcel
			);

			//- Flag to identify whether model fully describes the parcel
			virtual bool fullyDescribed() const;

			//- Return flag to identify whether or not injection of parcelI is
			//  permitted
			virtual bool validInjection(const label parcelI);
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#ifdef NoRepository
#	include "PatchInjection.C"
#endif

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
