/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | foam-extend: Open Source CFD
   \\    /   O peration     | Version:     4.1
    \\  /    A nd           | Web:         http://www.foam-extend.org
     \\/     M anipulation  | For copyright notice see file Copyright
-------------------------------------------------------------------------------
License
	This file is part of foam-extend.

	foam-extend is free software: you can redistribute it and/or modify it
	under the terms of the GNU General Public License as published by the
	Free Software Foundation, either version 3 of the License, or (at your
	option) any later version.

	foam-extend is distributed in the hope that it will be useful, but
	WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with foam-extend.  If not, see <http://www.gnu.org/licenses/>.

Class
	Foam::coupledFacePointPatch

Description
	coupled patch for post-processing.  Used as the base class for processor
	and cyclic pointPatches

SourceFiles
	coupledFacePointPatch.C

\*---------------------------------------------------------------------------*/

#ifndef coupledFacePointPatch_H
#define coupledFacePointPatch_H

#include "coupledPointPatch.H"
#include "facePointPatch.H"
#include "coupledPolyPatch.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

class pointBoundaryMesh;


class coupledFacePointPatch
:
	public facePointPatch,
	public coupledPointPatch
{
	// Private data

		const coupledPolyPatch& coupledPolyPatch_;


	// Private Member Functions

		//- Disallow default construct as copy
		coupledFacePointPatch(const coupledFacePointPatch&);

		//- Disallow default assignment
		void operator=(const coupledFacePointPatch&);


public:

	//- Runtime type information
	TypeName(coupledPolyPatch::typeName_());


	// Constructors

		//- Construct from components
		coupledFacePointPatch
		(
			const polyPatch& patch,
			const pointBoundaryMesh& bm
		);


	//- Destructor
	virtual ~coupledFacePointPatch();


	// Member Functions

		// Access

			//- Return true because this patch is coupled
			virtual bool coupled() const
			{
				return true;
			}

			//- Does this side own the patch ?
			//  HACKED: the patch contains both master and slave
			//  This influences parallel Cholesky and ILU preconditioning
			//  Please use cyclicGgi instead.  HJ, 22/Jun/2017
			virtual bool master() const
			{
				return true;
			}
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
