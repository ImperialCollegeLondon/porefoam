/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | foam-extend: Open Source CFD
   \\    /   O peration     | Version:     4.1
    \\  /    A nd           | Web:         http://www.foam-extend.org
     \\/     M anipulation  | For copyright notice see file Copyright
-------------------------------------------------------------------------------
License
	This file is part of foam-extend.

	foam-extend is free software: you can redistribute it and/or modify it
	under the terms of the GNU General Public License as published by the
	Free Software Foundation, either version 3 of the License, or (at your
	option) any later version.

	foam-extend is distributed in the hope that it will be useful, but
	WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with foam-extend.  If not, see <http://www.gnu.org/licenses/>.

Class
	Foam::pointBoundaryMesh

Description
	Foam::pointBoundaryMesh

SourceFiles
	pointBoundaryMesh.C

\*---------------------------------------------------------------------------*/

#ifndef pointBoundaryMesh_H
#define pointBoundaryMesh_H

#include "pointPatchList.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

// Forward declaration of classes
class pointMesh;
class polyBoundaryMesh;
class globalPointPatch;
class polyMesh;


class pointBoundaryMesh
:
	public pointPatchList
{
	// Private data

		//- Reference to mesh
		const pointMesh& mesh_;


	// Private Member Functions

		//- Calculate the geometry for the patches
		//  (transformation tensors etc.)
		void calcGeometry();

		//- Disallow default bitwise copy construct
		pointBoundaryMesh(const pointBoundaryMesh&);

		//- Disallow default bitwise assignment
		void operator=(const pointBoundaryMesh&);


public:

	//- Declare friendship with pointMesh
	friend class pointMesh;


	// Constructors

		//- Construct from polyBoundaryMesh
		pointBoundaryMesh
		(
			const pointMesh&,
			const polyBoundaryMesh&
		);


	// Member functions

		//- Return the mesh reference
		const pointMesh& mesh() const
		{
			return mesh_;
		}

		//- Return reference to globalPointPatch
		const globalPointPatch& globalPatch() const;

		//- Correct polyBoundaryMesh after moving points
		void movePoints();

		//- Correct polyBoundaryMesh after topology update
		void updateMesh
		(
			const polyMesh& pMesh
		);
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
