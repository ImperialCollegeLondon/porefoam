/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | foam-extend: Open Source CFD
   \\    /   O peration     | Version:     4.1
    \\  /    A nd           | Web:         http://www.foam-extend.org
     \\/     M anipulation  | For copyright notice see file Copyright
-------------------------------------------------------------------------------
License
	This file is part of foam-extend.

	foam-extend is free software: you can redistribute it and/or modify it
	under the terms of the GNU General Public License as published by the
	Free Software Foundation, either version 3 of the License, or (at your
	option) any later version.

	foam-extend is distributed in the hope that it will be useful, but
	WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with foam-extend.  If not, see <http://www.gnu.org/licenses/>.

Class
	Foam::tableReader

Description
	Base class to read table data for the interpolationTable

SourceFiles
	tableReader.C

\*---------------------------------------------------------------------------*/

#ifndef tableReader_H
#define tableReader_H

#include "fileName.H"
#include "wordList.H"
#include "vector.H"
#include "tensor.H"
#include "typeInfo.H"
#include "runTimeSelectionTables.H"
#include "autoPtr.H"
#include "dictionary.H"
#include "Tuple2.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{


template<class Type>
class tableReader
{

public:

	//- Runtime type information
	TypeName("tableReader");

	// Declare run-time constructor selection table

		declareRunTimeSelectionTable
		(
			autoPtr,
			tableReader,
			dictionary,
			(const dictionary& dict),
			(dict)
		);


	// Constructors

		//- Construct from dictionary
		tableReader(const dictionary& dict);

		//- Construct and return a clone
		virtual autoPtr<tableReader<Type> > clone() const = 0;


	// Selectors

		//- Return a reference to the selected tableReader
		static autoPtr<tableReader> New(const dictionary& spec);


	//- Destructor
	virtual ~tableReader();


	// Member functions

		//- Read the table
		virtual void operator()
		(
			const fileName&,
			List<Tuple2<scalar, Type> >&
		) = 0;

		//- Read the 2D table
		virtual void operator()
		(
			const fileName&,
			List<Tuple2<scalar, List<Tuple2<scalar, Type> > > >&
		) = 0;

		//- Write additional information
		virtual void write(Ostream& os) const;
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#ifdef NoRepository
	#include "tableReader.C"
#endif


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
