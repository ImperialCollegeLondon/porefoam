/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | foam-extend: Open Source CFD
   \\    /   O peration     | Version:     4.1
    \\  /    A nd           | Web:         http://www.foam-extend.org
     \\/     M anipulation  | For copyright notice see file Copyright
-------------------------------------------------------------------------------
License
	This file is part of foam-extend.

	foam-extend is free software: you can redistribute it and/or modify it
	under the terms of the GNU General Public License as published by the
	Free Software Foundation, either version 3 of the License, or (at your
	option) any later version.

	foam-extend is distributed in the hope that it will be useful, but
	WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with foam-extend.  If not, see <http://www.gnu.org/licenses/>.

Class
	Foam::functionEntries::calcEntry

Description
	Uses dynamic compilation to provide calculating functionality
	for entering dictionary entries.

	E.g.

	\verbatim
	a 1.0;
	b 3;
	c #calc "$a/$b";
	\endverbatim

	Note the explicit trailing 0 ('1.0') to force a to be read (and written)
	as a floating point number.

Note
	Internally this is just a wrapper around codeStream functionality - the
	#calc string gets used to construct a dictionary for codeStream.

SourceFiles
	calcEntry.C

\*---------------------------------------------------------------------------*/

#ifndef calcEntry_H
#define calcEntry_H

#include "functionEntry.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{
class dlLibraryTable;

namespace functionEntries
{


class calcEntry
:
	public functionEntry
{

	// Private Member Functions

		//- Disallow default bitwise copy construct
		calcEntry(const calcEntry&);

		//- Disallow default bitwise assignment
		void operator=(const calcEntry&);


public:

	//- Runtime type information
	ClassName("calc");


	// Member Functions

		//- Execute the functionEntry in a sub-dict context
		static bool execute(dictionary& parentDict, Istream&);

		//- Execute the functionEntry in a primitiveEntry context
		static bool execute
		(
			const dictionary& parentDict,
			primitiveEntry&,
			Istream&
		);

};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace functionEntries
} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
