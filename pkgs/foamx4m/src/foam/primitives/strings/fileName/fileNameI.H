/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | foam-extend: Open Source CFD
   \\    /   O peration     | Version:     4.1
    \\  /    A nd           | Web:         http://www.foam-extend.org
     \\/     M anipulation  | For copyright notice see file Copyright
-------------------------------------------------------------------------------
License
	This file is part of foam-extend.

	foam-extend is free software: you can redistribute it and/or modify it
	under the terms of the GNU General Public License as published by the
	Free Software Foundation, either version 3 of the License, or (at your
	option) any later version.

	foam-extend is distributed in the hope that it will be useful, but
	WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with foam-extend.  If not, see <http://www.gnu.org/licenses/>.

\*---------------------------------------------------------------------------*/

// * * * * * * * * * * * * * Private Member Functions  * * * * * * * * * * * //

inline void Foam::fileName::stripInvalid()
{
	if (debug && string::stripInvalid<fileName>(*this))
	{
		std::cerr
			<< "fileName::stripInvalid() called for invalid fileName "
			<< this->c_str() << std::endl;

		if (debug > 1)
		{
			std::cerr
				<< "    For debug level (= " << debug
				<< ") > 1 this is considered fatal" << std::endl;
			std::abort();
		}

		removeRepeated('/');
		removeTrailing('/');
	}
}


// * * * * * * * * * * * * * * * * Constructors  * * * * * * * * * * * * * * //

inline Foam::fileName::fileName()
:
	string()
{}

inline Foam::fileName::fileName(const fileName& fn)
:
	string(fn)
{}

inline Foam::fileName::fileName(const word& w)
:
	string(w)
{}


inline Foam::fileName::fileName(const string& str)
:
	string(str)
{
	stripInvalid();
}


inline Foam::fileName::fileName(const std::string& str)
:
	string(str)
{
	stripInvalid();
}


inline Foam::fileName::fileName(const char* str)
:
	string(str)
{
	stripInvalid();
}


// * * * * * * * * * * * * * * * Member Functions  * * * * * * * * * * * * * //

inline bool Foam::fileName::valid(char c)
{
	return
	(
		!isspace(c)
	 && c != '"'   // string quote
	 && c != '\''  // string quote
	);
}


// ************************************************************************* //
