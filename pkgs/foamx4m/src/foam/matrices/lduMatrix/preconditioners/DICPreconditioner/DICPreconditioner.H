/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | foam-extend: Open Source CFD
   \\    /   O peration     | Version:     4.1
    \\  /    A nd           | Web:         http://www.foam-extend.org
     \\/     M anipulation  | For copyright notice see file Copyright
-------------------------------------------------------------------------------
License
	This file is part of foam-extend.

	foam-extend is free software: you can redistribute it and/or modify it
	under the terms of the GNU General Public License as published by the
	Free Software Foundation, either version 3 of the License, or (at your
	option) any later version.

	foam-extend is distributed in the hope that it will be useful, but
	WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with foam-extend.  If not, see <http://www.gnu.org/licenses/>.

Class
	Foam::DICPreconditioner

Description
	Simplified diagonal-based incomplete Cholesky preconditioner for symmetric
	matrices (symmetric equivalent of DILU).  The reciprocal of the
	preconditioned diagonal is calculated and stored.

SourceFiles
	DICPreconditioner.C

\*---------------------------------------------------------------------------*/

#ifndef DICPreconditioner_H
#define DICPreconditioner_H

#include "lduMatrix.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{


class DICPreconditioner
:
	public lduPreconditioner
{
	// Private data

		//- The reciprocal preconditioned diagonal
		scalarField rD_;


public:

	//- Runtime type information
	TypeName("DIC");


	// Constructors

		//- Construct from matrix components and preconditioner solver controls
		DICPreconditioner
		(
			const lduMatrix& matrix,
			const FieldField<Field, scalar>& coupleBouCoeffs,
			const FieldField<Field, scalar>& coupleIntCoeffs,
			const lduInterfaceFieldPtrsList& interfaces,
			const dictionary& dict
		);


	// Destructor

		virtual ~DICPreconditioner()
		{}


	// Member Functions

		//- Calculate the reciprocal of the preconditioned diagonal
		static void calcReciprocalD(scalarField& rD, const lduMatrix& matrix);

		//- Execute preconditioning
		virtual void precondition
		(
			scalarField& wA,
			const scalarField& rA,
			const direction cmpt = 0
		) const;
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
