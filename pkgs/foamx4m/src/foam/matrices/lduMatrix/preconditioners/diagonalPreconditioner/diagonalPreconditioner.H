/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | foam-extend: Open Source CFD
   \\    /   O peration     | Version:     4.1
    \\  /    A nd           | Web:         http://www.foam-extend.org
     \\/     M anipulation  | For copyright notice see file Copyright
-------------------------------------------------------------------------------
License
	This file is part of foam-extend.

	foam-extend is free software: you can redistribute it and/or modify it
	under the terms of the GNU General Public License as published by the
	Free Software Foundation, either version 3 of the License, or (at your
	option) any later version.

	foam-extend is distributed in the hope that it will be useful, but
	WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with foam-extend.  If not, see <http://www.gnu.org/licenses/>.

Class
	Foam::diagonalPreconditioner

Description
	Diagonal preconditioner for both symmetric and asymmetric matrices.

	The reciprocal of the diagonal is calculated and stored for reuse
	because on most systems '*' is faster than '/'.

SourceFiles
	diagonalPreconditioner.C

\*---------------------------------------------------------------------------*/

#ifndef diagonalPreconditioner_H
#define diagonalPreconditioner_H

#include "lduMatrix.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{


class diagonalPreconditioner
:
	public lduPreconditioner
{
	// Private data

		//- The reciprocal diagonal
		scalarField rD;


	// Private Member Functions

		//- Disallow default bitwise copy construct
		diagonalPreconditioner(const diagonalPreconditioner&);

		//- Disallow default bitwise assignment
		void operator=(const diagonalPreconditioner&);


public:

	//- Runtime type information
	TypeName("diagonal");


	// Constructors

		//- Construct from matrix components and preconditioner solver controls
		diagonalPreconditioner
		(
			const lduMatrix& matrix,
			const FieldField<Field, scalar>& coupleBouCoeffs,
			const FieldField<Field, scalar>& coupleIntCoeffs,
			const lduInterfaceFieldPtrsList& interfaces,
			const dictionary& dict
		);


	// Destructor

		virtual ~diagonalPreconditioner()
		{}


	// Member Functions

		//- Execute preconditioning
		virtual void precondition
		(
			scalarField& wA,
			const scalarField& rA,
			const direction cmpt = 0
		) const;

		//- Execute preconditioning with matrix transpose
		virtual void preconditionT
		(
			scalarField& wT,
			const scalarField& rT,
			const direction cmpt = 0
		) const
		{
			precondition(wT, rT, cmpt);
		}
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
