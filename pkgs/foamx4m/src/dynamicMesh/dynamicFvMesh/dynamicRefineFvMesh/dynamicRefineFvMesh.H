/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | foam-extend: Open Source CFD
   \\    /   O peration     | Version:     4.1
    \\  /    A nd           | Web:         http://www.foam-extend.org
     \\/     M anipulation  | For copyright notice see file Copyright
-------------------------------------------------------------------------------
License
	This file is part of foam-extend.

	foam-extend is free software: you can redistribute it and/or modify it
	under the terms of the GNU General Public License as published by the
	Free Software Foundation, either version 3 of the License, or (at your
	option) any later version.

	foam-extend is distributed in the hope that it will be useful, but
	WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with foam-extend.  If not, see <http://www.gnu.org/licenses/>.

Class
	Foam::dynamicRefineFvMesh

Description
	A fvMesh with built-in refinement.

	Determines which cells to refine/unrefine and does all in update().

SourceFiles
	dynamicRefineFvMesh.C

\*---------------------------------------------------------------------------*/

#ifndef dynamicRefineFvMesh_H
#define dynamicRefineFvMesh_H

#include "dynamicFvMesh.H"
#include "hexRef8.H"
#include "PackedBoolList.H"
#include "Switch.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{


class dynamicRefineFvMesh
:
	public dynamicFvMesh
{

	// Private data

		// Helper variables to enable switching between a single and multiple
		// mesh motion updates within a time step (if update() is called more
		// than once in a single time step)

			//- Switch for single motion update (true by default)
			Switch singleMotionUpdate_;

			//- Helper varaible: current time index
			label curTimeIndex_;


protected:

		//- Mesh cutting engine
		hexRef8 meshCutter_;

		//- Dump cellLevel for postprocessing
		Switch dumpLevel_;

		//- Fluxes to map
		List<Pair<word> > correctFluxes_;

		//- Number of refinement/unrefinement steps done so far.
		label nRefinementIterations_;

		//- Protected cells (usually since not hexes)
		PackedBoolList protectedCell_;


	// Private Member Functions

		//- Count set/unset elements in packedlist.
		static label count(const PackedBoolList&, const unsigned int);

		//- Calculate cells that cannot be refined since would trigger
		//  refinement of protectedCell_ (since 2:1 refinement cascade)
		void calculateProtectedCells(PackedBoolList& unrefineableCell) const;

		//- Read the projection parameters from dictionary
		void readDict();


		//- Refine cells. Update mesh and fields.
		autoPtr<mapPolyMesh> refine(const labelList&);

		//- Unrefine cells. Gets passed in centre points of cells to combine.
		autoPtr<mapPolyMesh> unrefine(const labelList&);


		// Selection of cells to un/refine

			//- Calculates approximate value for refinement level so
			//  we don't go above maxCell
			scalar getRefineLevel
			(
				const label maxCells,
				const label maxRefinement,
				const scalar refineLevel,
				const scalarField&
			) const;

			//- Get per cell max of connected point
			scalarField maxPointField(const scalarField&) const;

			//- Get point min of connected cell
			scalarField minCellField(const volScalarField&) const;

			scalarField cellToPoint(const scalarField& vFld) const;

			scalarField error
			(
				const scalarField& fld,
				const scalar minLevel,
				const scalar maxLevel
			) const;

			//- Select candidate cells for refinement
			virtual void selectRefineCandidates
			(
				const scalar lowerRefineLevel,
				const scalar upperRefineLevel,
				const scalarField& vFld,
				PackedBoolList& candidateCell
			) const;

			//- Subset candidate cells for refinement
			virtual labelList selectRefineCells
			(
				const label maxCells,
				const label maxRefinement,
				const PackedBoolList& candidateCell
			) const;

			//- Select points that can be unrefined.
			virtual labelList selectUnrefinePoints
			(
				const scalar unrefineLevel,
				const PackedBoolList& markedCell,
				const scalarField& pFld
			) const;

			//- Extend markedCell with cell-face-cell.
			void extendMarkedCells(PackedBoolList& markedCell) const;

			//- Check all cells have 8 anchor points
			void checkEightAnchorPoints
			(
				PackedBoolList& protectedCell,
				label& nProtected
			) const;

private:

		//- Disallow default bitwise copy construct
		dynamicRefineFvMesh(const dynamicRefineFvMesh&);

		//- Disallow default bitwise assignment
		void operator=(const dynamicRefineFvMesh&);

public:

	//- Runtime type information
	TypeName("dynamicRefineFvMesh");


	// Constructors

		//- Construct from IOobject
		explicit dynamicRefineFvMesh(const IOobject& io);


	// Destructor

		virtual ~dynamicRefineFvMesh();


	// Member Functions

		//- Direct access to the refinement engine
		const hexRef8& meshCutter() const
		{
			return meshCutter_;
		}

		//- Cells which should not be refined/unrefined
		const PackedBoolList& protectedCell() const
		{
			return protectedCell_;
		}

		//- Cells which should not be refined/unrefined
		PackedBoolList& protectedCell()
		{
			return protectedCell_;
		}

		//- Update the mesh for both mesh motion and topology change
		virtual bool update();


	// Writing

		//- Write using given format, version and compression
		virtual bool writeObject
		(
			IOstream::streamFormat fmt,
			IOstream::versionNumber ver,
			IOstream::compressionType cmp
		) const;

};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
