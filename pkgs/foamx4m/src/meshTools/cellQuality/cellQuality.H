/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | foam-extend: Open Source CFD
   \\    /   O peration     | Version:     4.1
    \\  /    A nd           | Web:         http://www.foam-extend.org
     \\/     M anipulation  | For copyright notice see file Copyright
-------------------------------------------------------------------------------
License
	This file is part of foam-extend.

	foam-extend is free software: you can redistribute it and/or modify it
	under the terms of the GNU General Public License as published by the
	Free Software Foundation, either version 3 of the License, or (at your
	option) any later version.

	foam-extend is distributed in the hope that it will be useful, but
	WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with foam-extend.  If not, see <http://www.gnu.org/licenses/>.

Class
	Foam::cellQuality

Description
	Class calculates cell quality measures.

SourceFiles
	cellQuality.C

\*---------------------------------------------------------------------------*/

#ifndef cellQuality_H
#define cellQuality_H

#include "polyMesh.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{



class cellQuality
{
	// Private data

		//- Reference to mesh
		const polyMesh& mesh_;


	// Private Member Functions

		//- Disallow default bitwise copy construct
		cellQuality(const cellQuality&);

		//- Disallow default bitwise assignment
		void operator=(const cellQuality&);


public:

	// Constructors

		//- Construct from mesh
		cellQuality(const polyMesh& mesh);


	// Destructor - default


	// Member Functions

		//- Return cell non-orthogonality
		tmp<scalarField> nonOrthogonality() const;

		//- Return cell skewness
		tmp<scalarField> skewness() const;

		//- Return face non-orthogonality
		tmp<scalarField> faceNonOrthogonality() const;

		//- Return face skewness
		tmp<scalarField> faceSkewness() const;
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
