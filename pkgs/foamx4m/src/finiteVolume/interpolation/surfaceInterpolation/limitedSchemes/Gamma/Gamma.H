/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | foam-extend: Open Source CFD
   \\    /   O peration     | Version:     4.1
    \\  /    A nd           | Web:         http://www.foam-extend.org
     \\/     M anipulation  | For copyright notice see file Copyright
-------------------------------------------------------------------------------
License
	This file is part of foam-extend.

	foam-extend is free software: you can redistribute it and/or modify it
	under the terms of the GNU General Public License as published by the
	Free Software Foundation, either version 3 of the License, or (at your
	option) any later version.

	foam-extend is distributed in the hope that it will be useful, but
	WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with foam-extend.  If not, see <http://www.gnu.org/licenses/>.

Class
	Foam::GammaLimiter

Description
	Class with limiter function which returns the limiter for the
	Gamma differencing scheme based on phict obtained from the LimiterFunc
	class.

	Used in conjunction with the template class LimitedScheme.

SourceFiles
	Gamma.C

\*---------------------------------------------------------------------------*/

#ifndef Gamma_H
#define Gamma_H

#include "vector.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{


template<class LimiterFunc>
class GammaLimiter
:
	public LimiterFunc
{
	scalar k_;

public:

	GammaLimiter(Istream& is)
	:
		k_(readScalar(is))
	{
		if (k_ < 0 || k_ > 1)
		{
			FatalIOErrorIn("GammaLimiter(Istream& is)", is)
				<< "coefficient = " << k_
				<< " should be >= 0 and <= 1"
				<< exit(FatalIOError);
		}

		// Rescale k_ to be >= 0 and <= 0.5 (TVD conformant)
		// and avoid the /0 when k_ = 0
		k_ = max(k_/2.0, SMALL);
	}

	scalar limiter
	(
		const scalar cdWeight,
		const scalar faceFlux,
		const typename LimiterFunc::phiType& phiP,
		const typename LimiterFunc::phiType& phiN,
		const typename LimiterFunc::gradPhiType& gradcP,
		const typename LimiterFunc::gradPhiType& gradcN,
		const vector& d
	) const
	{
		scalar phict = LimiterFunc::phict
		(
			faceFlux, phiP, phiN, gradcP, gradcN, d
		);

		return min(max(phict/k_, 0), 1);
	}
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
