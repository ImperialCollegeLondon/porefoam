/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | foam-extend: Open Source CFD
   \\    /   O peration     | Version:     4.1
    \\  /    A nd           | Web:         http://www.foam-extend.org
     \\/     M anipulation  | For copyright notice see file Copyright
-------------------------------------------------------------------------------
License
	This file is part of foam-extend.

	foam-extend is free software: you can redistribute it and/or modify it
	under the terms of the GNU General Public License as published by the
	Free Software Foundation, either version 3 of the License, or (at your
	option) any later version.

	foam-extend is distributed in the hope that it will be useful, but
	WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with foam-extend.  If not, see <http://www.gnu.org/licenses/>.

Class
	Foam::upwind

Description
	Upwind differencing scheme class.

SourceFiles
	upwind.C

\*---------------------------------------------------------------------------*/

#ifndef upwind_H
#define upwind_H

#include "limitedSurfaceInterpolationScheme.H"
#include "volFields.H"
#include "surfaceFields.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{


template<class Type>
class upwind
:
	public limitedSurfaceInterpolationScheme<Type>
{
	// Private Member Functions

		//- Disallow default bitwise assignment
		void operator=(const upwind&);


public:

	//- Runtime type information
	TypeName("upwind");


	// Constructors

		//- Construct from faceFlux
		upwind
		(
			const fvMesh& mesh,
			const surfaceScalarField& faceFlux
		)
		:
			limitedSurfaceInterpolationScheme<Type>(mesh, faceFlux)
		{}

		//- Construct from Istream.
		//  The name of the flux field is read from the Istream and looked-up
		//  from the mesh objectRegistry
		upwind
		(
			const fvMesh& mesh,
			Istream& is
		)
		:
			limitedSurfaceInterpolationScheme<Type>(mesh, is)
		{}

		//- Construct from faceFlux and Istream
		upwind
		(
			const fvMesh& mesh,
			const surfaceScalarField& faceFlux,
			Istream&
		)
		:
			limitedSurfaceInterpolationScheme<Type>(mesh, faceFlux)
		{}


	// Member Functions

		//- Return the interpolation limiter
		virtual tmp<surfaceScalarField> limiter
		(
			const GeometricField<Type, fvPatchField, volMesh>&
		) const
		{
			return tmp<surfaceScalarField>
			(
				new surfaceScalarField
				(
					IOobject
					(
					    "upwindLimiter",
					    this->mesh().time().timeName(),
					    this->mesh()
					),
					this->mesh(),
					dimensionedScalar("upwindLimiter", dimless, 0)
				)
			);
		}

		//- Return the interpolation weighting factors
		tmp<surfaceScalarField> weights() const
		{
			return pos(this->faceFlux_);
		}

		//- Return the interpolation weighting factors
		virtual tmp<surfaceScalarField> weights
		(
			const GeometricField<Type, fvPatchField, volMesh>&
		) const
		{
			return weights();
		}
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
