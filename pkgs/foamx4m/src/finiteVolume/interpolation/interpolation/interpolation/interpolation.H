/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | foam-extend: Open Source CFD
   \\    /   O peration     | Version:     4.1
    \\  /    A nd           | Web:         http://www.foam-extend.org
     \\/     M anipulation  | For copyright notice see file Copyright
-------------------------------------------------------------------------------
License
	This file is part of foam-extend.

	foam-extend is free software: you can redistribute it and/or modify it
	under the terms of the GNU General Public License as published by the
	Free Software Foundation, either version 3 of the License, or (at your
	option) any later version.

	foam-extend is distributed in the hope that it will be useful, but
	WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with foam-extend.  If not, see <http://www.gnu.org/licenses/>.

Class
	Foam::interpolation

Description
	Abstract base class for interpolation

\*---------------------------------------------------------------------------*/

#ifndef interpolation_H
#define interpolation_H

#include "faceList.H"
#include "volFieldsFwd.H"
#include "pointFields.H"
#include "typeInfo.H"
#include "autoPtr.H"
#include "runTimeSelectionTables.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

class polyMesh;


template<class Type>
class interpolation
{

protected:

	// Protected data

		const GeometricField<Type, fvPatchField, volMesh>& psi_;

		const polyMesh& pMesh_;
		const vectorField& pMeshPoints_;
		const faceList& pMeshFaces_;
		const vectorField& pMeshFaceCentres_;
		const vectorField& pMeshFaceAreas_;


public:

	//- Runtime type information
	virtual const word& type() const = 0;


	// Declare run-time constructor selection table

		declareRunTimeSelectionTable
		(
			autoPtr,
			interpolation,
			dictionary,
			(
				const GeometricField<Type, fvPatchField, volMesh>& psi
			),
			(psi)
		);


	// Selectors

		//- Return a reference to the specified interpolation scheme
		static autoPtr<interpolation<Type> > New
		(
			const word& interpolationType,
			const GeometricField<Type, fvPatchField, volMesh>& psi
		);

		//- Return a reference to the selected interpolation scheme
		static autoPtr<interpolation<Type> > New
		(
			const dictionary& interpolationSchemes,
			const GeometricField<Type, fvPatchField, volMesh>& psi
		);


	// Constructors

		//- Construct from components
		interpolation
		(
			const GeometricField<Type, fvPatchField, volMesh>& psi
		);


	// Destructor

		virtual ~interpolation()
		{}


	// Member Functions

		//- Return the field to be interpolated
		const GeometricField<Type, fvPatchField, volMesh>& psi() const
		{
			return psi_;
		}

		//- Interpolate field to the given point in the given cell
		virtual Type interpolate
		(
			const vector& position,
			const label nCell,
			const label facei = -1
		) const = 0;
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#define makeInterpolationType(SS, Type)                                       \
					                                                          \
defineNamedTemplateTypeNameAndDebug(SS<Type>, 0);                             \
					                                                          \
interpolation<Type>::adddictionaryConstructorToTable<SS<Type> >               \
	add##SS##Type##ConstructorToTable_;


#define makeInterpolation(SS)                                                 \
					                                                          \
makeInterpolationType(SS, scalar)                                             \
makeInterpolationType(SS, vector)                                             \
makeInterpolationType(SS, sphericalTensor)                                    \
makeInterpolationType(SS, symmTensor)                                         \
makeInterpolationType(SS, symmTensor4thOrder)                                 \
makeInterpolationType(SS, diagTensor)                                         \
makeInterpolationType(SS, tensor)


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#ifdef NoRepository
#	include "interpolation.C"
#endif

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
