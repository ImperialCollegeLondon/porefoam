/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | foam-extend: Open Source CFD
   \\    /   O peration     | Version:     4.1
    \\  /    A nd           | Web:         http://www.foam-extend.org
     \\/     M anipulation  | For copyright notice see file Copyright
-------------------------------------------------------------------------------
License
	This file is part of foam-extend.

	foam-extend is free software: you can redistribute it and/or modify it
	under the terms of the GNU General Public License as published by the
	Free Software Foundation, either version 3 of the License, or (at your
	option) any later version.

	foam-extend is distributed in the hope that it will be useful, but
	WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with foam-extend.  If not, see <http://www.gnu.org/licenses/>.

Class
	Foam::processorFvPatch

Description
	Processor patch.

SourceFiles
	processorFvPatch.C

\*---------------------------------------------------------------------------*/

#ifndef processorFvPatch_H
#define processorFvPatch_H

#include "coupledFvPatch.H"
#include "processorLduInterface.H"
#include "processorPolyPatch.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{


class processorFvPatch
:
	public coupledFvPatch,
	public processorLduInterface
{
	// Private Data

		//- Reference to processor patch
		const processorPolyPatch& procPolyPatch_;


protected:

	// Protected Member functions

		//- Make patch weighting factors
		void makeWeights(fvsPatchScalarField&) const;

		//- Make patch face - neighbour cell distances
		void makeDeltaCoeffs(fvsPatchScalarField&) const;


public:

	//- Runtime type information
	TypeName(processorPolyPatch::typeName_());


	// Constructors

		//- Construct from components
		processorFvPatch(const polyPatch& patch, const fvBoundaryMesh& bm)
		:
			coupledFvPatch(patch, bm),
			procPolyPatch_(refCast<const processorPolyPatch>(patch))
		{}


	//- Destructor
	virtual ~processorFvPatch()
	{}


	// Member functions

		//- Return interface size
		virtual label interfaceSize() const
		{
			return procPolyPatch_.size();
		}

		//- Return processor number
		int myProcNo() const
		{
			return procPolyPatch_.myProcNo();
		}

		//- Return neigbour processor number
		int neighbProcNo() const
		{
			return procPolyPatch_.neighbProcNo();
		}

		//- Return true if running parallel
		virtual bool coupled() const
		{
			if (Pstream::parRun())
			{
				return true;
			}
			else
			{
				return false;
			}
		}

		// Communication support

			//- Return communicator used for parallel communication
			virtual int comm() const
			{
				return procPolyPatch_.comm();
			}

			//- Return message tag used for sending
			virtual int tag() const
			{
				return procPolyPatch_.tag();
			}


		//- Return face transformation tensor
		virtual const tensorField& forwardT() const
		{
			return procPolyPatch_.forwardT();
		}

		//- Return delta (P to N) vectors across coupled patch
		virtual tmp<vectorField> delta() const;


		// Interface transfer functions

			//- Return the values of the given internal data adjacent to
			//  the interface as a field
			virtual tmp<labelField> interfaceInternalField
			(
				const unallocLabelList& internalData
			) const;

			//- Initialise interface data transfer
			virtual void initTransfer
			(
				const Pstream::commsTypes commsType,
				const unallocLabelList& interfaceData
			) const;

			//- Transfer and return neighbour field
			virtual tmp<labelField> transfer
			(
				const Pstream::commsTypes commsType,
				const unallocLabelList& interfaceData
			) const;

			//- Initialise neighbour field transfer
			virtual void initInternalFieldTransfer
			(
				const Pstream::commsTypes commsType,
				const unallocLabelList& internalData
			) const;

			//- Return neighbour field
			virtual tmp<labelField> internalFieldTransfer
			(
				const Pstream::commsTypes commsType,
				const unallocLabelList& internalData
			) const;

			//- Initialise transfer of prolongation matrix to the interface
			virtual void initProlongationTransfer
			(
				const Pstream::commsTypes commsType,
				const crMatrix& iF
			) const;

			//- Transfer and return prolongation matrix adjacent to
			//  the interface
			virtual autoPtr<crMatrix> prolongationTransfer
			(
				const Pstream::commsTypes commsType,
				const crMatrix& iF
			) const;
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
