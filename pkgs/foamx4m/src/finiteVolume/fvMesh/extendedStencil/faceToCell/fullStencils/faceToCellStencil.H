/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | foam-extend: Open Source CFD
   \\    /   O peration     | Version:     4.1
    \\  /    A nd           | Web:         http://www.foam-extend.org
     \\/     M anipulation  | For copyright notice see file Copyright
-------------------------------------------------------------------------------
License
	This file is part of foam-extend.

	foam-extend is free software: you can redistribute it and/or modify it
	under the terms of the GNU General Public License as published by the
	Free Software Foundation, either version 3 of the License, or (at your
	option) any later version.

	foam-extend is distributed in the hope that it will be useful, but
	WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with foam-extend.  If not, see <http://www.gnu.org/licenses/>.

Class
	Foam::faceToCellStencil

Description
	baseclass for extended cell centred addressing. Contains per cell a
	list of neighbouring faces in global addressing.

SourceFiles
	faceToCellStencil.C

\*---------------------------------------------------------------------------*/

#ifndef faceToCellStencil_H
#define faceToCellStencil_H

#include "globalIndex.H"
#include "boolList.H"
#include "HashSet.H"
#include "indirectPrimitivePatch.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

class polyMesh;


class faceToCellStencil
:
	public labelListList
{
	// Private data

		const polyMesh& mesh_;

		//- Global numbering for faces
		const globalIndex globalNumbering_;


	// Private Member Functions

//HJ		//- Disallow default bitwise copy construct
//HJ		faceToCellStencil(const faceToCellStencil&);
//HJ
//HJ		//- Disallow default bitwise assignment
//HJ		void operator=(const faceToCellStencil&);

public:

	// Constructors

		//- Construct from mesh
		explicit faceToCellStencil(const polyMesh&);


	// Member Functions

		const polyMesh& mesh() const
		{
			return mesh_;
		}

		//- Global numbering for faces
		const globalIndex& globalNumbering() const
		{
			return globalNumbering_;
		}

};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
