/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | foam-extend: Open Source CFD
   \\    /   O peration     | Version:     4.1
    \\  /    A nd           | Web:         http://www.foam-extend.org
     \\/     M anipulation  | For copyright notice see file Copyright
-------------------------------------------------------------------------------
License
	This file is part of foam-extend.

	foam-extend is free software: you can redistribute it and/or modify it
	under the terms of the GNU General Public License as published by the
	Free Software Foundation, either version 3 of the License, or (at your
	option) any later version.

	foam-extend is distributed in the hope that it will be useful, but
	WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with foam-extend.  If not, see <http://www.gnu.org/licenses/>.

Class
	ggiFvPatchField

Description
	Generalized grid interface patch field.

Author
	Hrvoje Jasak, Wikki Ltd.  All rights reserved

SourceFiles
	ggiFvPatchField.C

\*---------------------------------------------------------------------------*/

#ifndef ggiFvPatchField_H
#define ggiFvPatchField_H

#include "coupledFvPatchField.H"
#include "ggiLduInterfaceField.H"
#include "ggiFvPatch.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

// Forward declaration
template<class Type>
class fvMatrix;



template<class Type>
class ggiFvPatchField
:
	public ggiLduInterfaceField,
	public coupledFvPatchField<Type>
{
	// Private data

		//- Local reference cast into the ggi patch
		const ggiFvPatch& ggiPatch_;


public:

	//- Runtime type information
	TypeName(ggiFvPatch::typeName_());


	// Constructors

		//- Construct from patch and internal field
		ggiFvPatchField
		(
			const fvPatch&,
			const DimensionedField<Type, volMesh>&
		);

		//- Construct from patch, internal field and dictionary
		ggiFvPatchField
		(
			const fvPatch&,
			const DimensionedField<Type, volMesh>&,
			const dictionary&
		);

		//- Construct by mapping given ggiFvPatchField onto a new patch
		ggiFvPatchField
		(
			const ggiFvPatchField<Type>&,
			const fvPatch&,
			const DimensionedField<Type, volMesh>&,
			const fvPatchFieldMapper&
		);

		//- Construct as copy setting internal field reference
		ggiFvPatchField
		(
			const ggiFvPatchField<Type>&,
			const DimensionedField<Type, volMesh>&
		);

		//- Construct and return a clone
		virtual tmp<fvPatchField<Type> > clone() const
		{
			return tmp<fvPatchField<Type> >
			(
				new ggiFvPatchField<Type>(*this)
			);
		}

		//- Construct and return a clone setting internal field reference
		virtual tmp<fvPatchField<Type> > clone
		(
			const DimensionedField<Type, volMesh>& iF
		) const
		{
			return tmp<fvPatchField<Type> >
			(
				new ggiFvPatchField<Type>(*this, iF)
			);
		}


	// Member functions

		// Access

			//- Return reference to GGI patch
			const ggiFvPatch& ggiPatch() const
			{
				return ggiPatch_;
			}

			//- Return shadow patch field
			const ggiFvPatchField<Type>& shadowPatchField() const;


		// Evaluation functions

			//- Return neighbour field given internal cell data
			virtual tmp<Field<Type> > patchNeighbourField() const;

			//- Initialise the evaluation of the patch field
			virtual void initEvaluate(const Pstream::commsTypes commsType);

			//- Evaluate the patch field
			virtual void evaluate
			(
				const Pstream::commsTypes commsType
			);


		// Coupled interface functionality

			//- Transform neighbour field
			virtual void transformCoupleField
			(
				scalarField& f,
				const direction cmpt
			) const
			{
				ggiLduInterfaceField::transformCoupleField(f, cmpt);
			}

			//- Initialise neighbour matrix update
			virtual void initInterfaceMatrixUpdate
			(
				const scalarField& psiInternal,
				scalarField& result,
				const lduMatrix& m,
				const scalarField& coeffs,
				const direction cmpt,
				const Pstream::commsTypes commsType,
				const bool switchToLhs
			) const;

			//- Update result field based on interface functionality
			virtual void updateInterfaceMatrix
			(
				const scalarField& psiInternal,
				scalarField& result,
				const lduMatrix&,
				const scalarField& coeffs,
				const direction cmpt,
				const Pstream::commsTypes commsType,
				const bool switchToLhs
			) const;


		// Block coupled interface functionality

			//- Transform given patch field
			virtual void transformCoupleField
			(
				Field<Type>& f
			) const
			{
				FatalErrorIn
				(
					"ggiFvPatchField<Type>::transformCoupleField"
					"(Field<Type>& f) const"
				)   << "transformCoupleField not implemented for patch "
					<< this->patch().name()
					<< abort(FatalError);
			}

			//- Initialise neighbour matrix update
			virtual void initInterfaceMatrixUpdate
			(
				const Field<Type>&,
				Field<Type>&,
				const BlockLduMatrix<Type>&,
				const CoeffField<Type>&,
				const Pstream::commsTypes commsType,
				const bool switchToLhs
			) const;

			//- Update result field based on interface functionality
			virtual void updateInterfaceMatrix
			(
				const Field<Type>&,
				Field<Type>&,
				const BlockLduMatrix<Type>&,
				const CoeffField<Type>&,
				const Pstream::commsTypes commsType,
				const bool switchToLhs
			) const;


		// Patch interpolation and patch flux

			//- Calculate patch flux
			virtual void patchFlux
			(
				GeometricField<Type, fvsPatchField, surfaceMesh>& flux,
				const fvMatrix<Type>& matrix
			) const;


		// Matrix manipulation

			//- Manipulate value and boundary coefficients for convection. Used
			//  to ensure conservation across partially overlapping GGI faces if
			//  the bridging is switched on
			virtual void manipulateValueCoeffs(fvMatrix<Type>& matrix) const;

			//- Manipulate value and boundary coefficients for diffusion. Used
			//  to ensure conservation across partially overlapping GGI faces if
			//  the bridging is switched on
			virtual void manipulateGradientCoeffs(fvMatrix<Type>& matrix) const;


		// GGI coupled interface functions

			//- Does the patch field perform the transfromation
			virtual bool doTransform() const
			{
				return !(ggiPatch_.parallel() || pTraits<Type>::rank == 0);
			}

			//- Return face transformation tensor
			virtual const tensorField& forwardT() const
			{
				return ggiPatch_.forwardT();
			}

			//- Return neighbour-cell transformation tensor
			virtual const tensorField& reverseT() const
			{
				return ggiPatch_.reverseT();
			}

			//- Return rank of component for transform
			virtual int rank() const
			{
				return pTraits<Type>::rank;
			}
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#include "ggiFvPatchScalarField.H"

#ifdef NoRepository
#	include "ggiFvPatchField.C"
#endif

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
