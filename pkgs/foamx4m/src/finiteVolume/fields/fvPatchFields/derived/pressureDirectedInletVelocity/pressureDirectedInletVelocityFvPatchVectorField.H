/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | foam-extend: Open Source CFD
   \\    /   O peration     | Version:     4.1
    \\  /    A nd           | Web:         http://www.foam-extend.org
     \\/     M anipulation  | For copyright notice see file Copyright
-------------------------------------------------------------------------------
License
	This file is part of foam-extend.

	foam-extend is free software: you can redistribute it and/or modify it
	under the terms of the GNU General Public License as published by the
	Free Software Foundation, either version 3 of the License, or (at your
	option) any later version.

	foam-extend is distributed in the hope that it will be useful, but
	WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with foam-extend.  If not, see <http://www.gnu.org/licenses/>.

Class
	Foam::pressureDirectedInletVelocityFvPatchVectorField

Description
	Velocity inlet boundary condition for patches where the pressure is
	specified. The inflow velocity is obtained from the flux with the
	specified "inletDirection" direction.  If reverse flow is possible or
	expected use the "pressureDirectedInletOutletVelocityFvPatchVectorField"
	BC instead.

SourceFiles
	pressureDirectedInletVelocityFvPatchVectorField.C

\*---------------------------------------------------------------------------*/

#ifndef pressureDirectedInletVelocityFvPatchVectorField_H
#define pressureDirectedInletVelocityFvPatchVectorField_H

#include "fvPatchFields.H"
#include "fixedValueFvPatchFields.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{


class pressureDirectedInletVelocityFvPatchVectorField
:
	public fixedValueFvPatchVectorField
{
	// Private data

		//- Name of flux field
		word phiName_;

		//- Name of density field
		word rhoName_;

		//- Inlet direction
		vectorField inletDir_;


public:

	//- Runtime type information
	TypeName("pressureDirectedInletVelocity");


	// Constructors

		//- Construct from patch and internal field
		pressureDirectedInletVelocityFvPatchVectorField
		(
			const fvPatch&,
			const DimensionedField<vector, volMesh>&
		);

		//- Construct from patch, internal field and dictionary
		pressureDirectedInletVelocityFvPatchVectorField
		(
			const fvPatch&,
			const DimensionedField<vector, volMesh>&,
			const dictionary&
		);

		//- Construct by mapping given
		//  pressureDirectedInletVelocityFvPatchVectorField
		//  onto a new patch
		pressureDirectedInletVelocityFvPatchVectorField
		(
			const pressureDirectedInletVelocityFvPatchVectorField&,
			const fvPatch&,
			const DimensionedField<vector, volMesh>&,
			const fvPatchFieldMapper&
		);

		//- Construct as copy
		pressureDirectedInletVelocityFvPatchVectorField
		(
			const pressureDirectedInletVelocityFvPatchVectorField&
		);

		//- Construct and return a clone
		virtual tmp<fvPatchVectorField> clone() const
		{
			return tmp<fvPatchVectorField>
			(
				new pressureDirectedInletVelocityFvPatchVectorField(*this)
			);
		}

		//- Construct as copy setting internal field reference
		pressureDirectedInletVelocityFvPatchVectorField
		(
			const pressureDirectedInletVelocityFvPatchVectorField&,
			const DimensionedField<vector, volMesh>&
		);

		//- Construct and return a clone setting internal field reference
		virtual tmp<fvPatchVectorField> clone
		(
			const DimensionedField<vector, volMesh>& iF
		) const
		{
			return tmp<fvPatchVectorField>
			(
				new pressureDirectedInletVelocityFvPatchVectorField
				(
					*this,
					iF
				)
			);
		}


	// Member functions

		// Access

			//- Return the name of rho
			const word& rhoName() const
			{
				return rhoName_;
			}

			//- Return reference to the name of rho to allow adjustment
			word& rhoName()
			{
				return rhoName_;
			}

			//- Return the name of phi
			const word& phiName() const
			{
				return phiName_;
			}

			//- Return reference to the name of phi to allow adjustment
			word& phiName()
			{
				return phiName_;
			}

			//- Return inlet direction
			const vectorField& inletDir() const
			{
				return inletDir_;
			}

			//- Return access to inlet direction
			vectorField& inletDir()
			{
				return inletDir_;
			}


		// Mapping functions

			//- Map (and resize as needed) from self given a mapping object
			virtual void autoMap
			(
				const fvPatchFieldMapper&
			);

			//- Reverse map the given fvPatchField onto this fvPatchField
			virtual void rmap
			(
				const fvPatchVectorField&,
				const labelList&
			);


		//- Update the coefficients associated with the patch field
		virtual void updateCoeffs();

		//- Write
		virtual void write(Ostream&) const;


	// Member operators

		virtual void operator=(const fvPatchField<vector>& pvf);
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
