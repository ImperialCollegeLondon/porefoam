/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | foam-extend: Open Source CFD
   \\    /   O peration     | Version:     4.1
    \\  /    A nd           | Web:         http://www.foam-extend.org
     \\/     M anipulation  | For copyright notice see file Copyright
-------------------------------------------------------------------------------
License
	This file is part of foam-extend.

	foam-extend is free software: you can redistribute it and/or modify it
	under the terms of the GNU General Public License as published by the
	Free Software Foundation, either version 3 of the License, or (at your
	option) any later version.

	foam-extend is distributed in the hope that it will be useful, but
	WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with foam-extend.  If not, see <http://www.gnu.org/licenses/>.

Class
	Foam::directionMixedFvPatchField

Description
	Foam::directionMixedFvPatchField

SourceFiles
	directionMixedFvPatchField.C

\*---------------------------------------------------------------------------*/

#ifndef directionMixedFvPatchField_H
#define directionMixedFvPatchField_H

#include "transformFvPatchFields.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{


template<class Type>
class directionMixedFvPatchField
:
	public transformFvPatchField<Type>
{
	// Private data

		//- Value field
		Field<Type> refValue_;

		//- Normal gradient field
		Field<Type> refGrad_;

		//- Fraction (0-1) of value used for boundary condition
		symmTensorField valueFraction_;


public:

	//- Runtime type information
	TypeName("directionMixed");


	// Constructors

		//- Construct from patch and internal field
		directionMixedFvPatchField
		(
			const fvPatch&,
			const DimensionedField<Type, volMesh>&
		);

		//- Construct from patch, internal field and dictionary
		directionMixedFvPatchField
		(
			const fvPatch&,
			const DimensionedField<Type, volMesh>&,
			const dictionary&
		);

		//- Construct by mapping given directionMixedFvPatchField onto
		//  a new patch
		directionMixedFvPatchField
		(
			const directionMixedFvPatchField<Type>&,
			const fvPatch&,
			const DimensionedField<Type, volMesh>&,
			const fvPatchFieldMapper&
		);

		//- Construct and return a clone
		virtual tmp<fvPatchField<Type> > clone() const
		{
			return tmp<fvPatchField<Type> >
			(
				new directionMixedFvPatchField<Type>(*this)
			);
		}

		//- Construct as copy
		directionMixedFvPatchField
		(
			const directionMixedFvPatchField<Type>&
		);

		//- Construct as copy setting internal field reference
		directionMixedFvPatchField
		(
			const directionMixedFvPatchField<Type>&,
			const DimensionedField<Type, volMesh>&
		);

		//- Construct and return a clone setting internal field reference
		virtual tmp<fvPatchField<Type> > clone
		(
			const DimensionedField<Type, volMesh>& iF
		) const
		{
			return tmp<fvPatchField<Type> >
			(
				new directionMixedFvPatchField<Type>(*this, iF)
			);
		}


	// Member functions

		// Access

			//- Return true if this patch field fixes a value.
			//  Needed to check if a level has to be specified while solving
			//  Poissons equations.
			virtual bool fixesValue() const
			{
				return true;
			}


		// Mapping functions

			//- Map (and resize as needed) from self given a mapping object
			virtual void autoMap
			(
				const fvPatchFieldMapper&
			);

			//- Reverse map the given fvPatchField onto this fvPatchField
			virtual void rmap
			(
				const fvPatchField<Type>&,
				const labelList&
			);


		// Return defining fields

			//- Return reference value
			virtual const Field<Type>& refValue() const
			{
				return refValue_;
			}

			//- Return access to reference value
			virtual Field<Type>& refValue()
			{
				return refValue_;
			}

			//- Return reference gradient
			virtual const Field<Type>& refGrad() const
			{
				return refGrad_;
			}

			//- Return access to reference gradient
			virtual Field<Type>& refGrad()
			{
				return refGrad_;
			}

			//- Return value fraction
			virtual const symmTensorField& valueFraction() const
			{
				return valueFraction_;
			}

			//- Return access to value fraction
			virtual symmTensorField& valueFraction()
			{
				return valueFraction_;
			}


		// Evaluation functions

			//- Return gradient at boundary
			virtual tmp<Field<Type> > snGrad() const;

			//- Evaluate the patch field
			virtual void evaluate
			(
				const Pstream::commsTypes commsType = Pstream::blocking
			);

			//- Return face-gradient transform diagonal
			virtual tmp<Field<Type> > snGradTransformDiag() const;


		//- Write
		virtual void write(Ostream&) const;


	// Member operators

		virtual void operator=(const fvPatchField<Type>&) {}
		virtual void operator+=(const fvPatchField<Type>&) {}
		virtual void operator-=(const fvPatchField<Type>&) {}
		virtual void operator*=(const fvPatchField<Type>&) {}
		virtual void operator/=(const fvPatchField<Type>&) {}

		virtual void operator=(const Field<Type>&) {}
		virtual void operator+=(const Field<Type>&) {}
		virtual void operator-=(const Field<Type>&) {}
		virtual void operator*=(const Field<scalar>&) {}
		virtual void operator/=(const Field<scalar>&) {}

		virtual void operator=(const Type&) {}
		virtual void operator+=(const Type&) {}
		virtual void operator-=(const Type&) {}
		virtual void operator*=(const scalar) {}
		virtual void operator/=(const scalar) {}
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#ifdef NoRepository
#	include "directionMixedFvPatchField.C"
#endif

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
