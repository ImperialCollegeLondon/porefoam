/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | foam-extend: Open Source CFD
   \\    /   O peration     | Version:     4.1
    \\  /    A nd           | Web:         http://www.foam-extend.org
     \\/     M anipulation  | For copyright notice see file Copyright
-------------------------------------------------------------------------------
License
	This file is part of foam-extend.

	foam-extend is free software: you can redistribute it and/or modify it
	under the terms of the GNU General Public License as published by the
	Free Software Foundation, either version 3 of the License, or (at your
	option) any later version.

	foam-extend is distributed in the hope that it will be useful, but
	WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with foam-extend.  If not, see <http://www.gnu.org/licenses/>.

Class
	Foam::coupledFvPatchField

Description
	Foam::coupledFvPatchField

SourceFiles
	coupledFvPatchField.C

\*---------------------------------------------------------------------------*/

#ifndef coupledFvPatchField_H
#define coupledFvPatchField_H

#include "BlockLduInterfaceField.H"
#include "CoeffField.H"

#include "lduInterfaceField.H"
#include "fvPatchField.H"
#include "coupledFvPatch.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{


template<class Type>
class coupledFvPatchField
:
	public BlockLduInterfaceField<Type>,
	public fvPatchField<Type>
{

public:

	//- Runtime type information
	TypeName(coupledFvPatch::typeName_());


	// Constructors

		//- Construct from patch and internal field
		coupledFvPatchField
		(
			const fvPatch&,
			const DimensionedField<Type, volMesh>&
		);

		//- Construct from patch and internal field and patch field
		coupledFvPatchField
		(
			const fvPatch&,
			const DimensionedField<Type, volMesh>&,
			const Field<Type>&
		);

		//- Construct from patch, internal field and dictionary
		coupledFvPatchField
		(
			const fvPatch&,
			const DimensionedField<Type, volMesh>&,
			const dictionary&,
			const bool valueRequired = false
		);

		//- Construct by mapping the given coupledFvPatchField onto a new patch
		coupledFvPatchField
		(
			const coupledFvPatchField<Type>&,
			const fvPatch&,
			const DimensionedField<Type, volMesh>&,
			const fvPatchFieldMapper&
		);

		//- Construct as copy
		coupledFvPatchField
		(
			const coupledFvPatchField<Type>&
		);

		//- Construct and return a clone
		virtual tmp<fvPatchField<Type> > clone() const = 0;

		//- Construct as copy setting internal field reference
		coupledFvPatchField
		(
			const coupledFvPatchField<Type>&,
			const DimensionedField<Type, volMesh>&
		);

		//- Construct and return a clone
		virtual tmp<fvPatchField<Type> > clone
		(
			const DimensionedField<Type, volMesh>&
		) const = 0;


	// Member functions

		// Access

			//- Return true if this patch field is derived from
			//  coupledFvPatchField<Type>.
			virtual bool coupled() const
			{
				return true;
			}

			//- Return neighbour field of internal field
			virtual tmp<Field<Type> > patchNeighbourField() const = 0;


		// Evaluation functions

			virtual tmp<scalarField>
			untransformedInterpolate(const direction cmpt) const
			{
				return this->patchNeighbourField()().component(cmpt);
			}


		// Evaluation functions

			//- Return patch-normal gradient
			virtual tmp<Field<Type> > snGrad() const;

			//- Initialise the evaluation of the patch field
			virtual void initEvaluate
			(
				const Pstream::commsTypes commsType
			);

			//- Evaluate the patch field
			virtual void evaluate
			(
				const Pstream::commsTypes commsType
			);

			//- Return the matrix diagonal coefficients corresponding to the
			//  evaluation of the value of this patchField with given weights
			virtual tmp<Field<Type> > valueInternalCoeffs
			(
				const tmp<scalarField>&
			) const;

			//- Return the matrix source coefficients corresponding to the
			//  evaluation of the value of this patchField with given weights
			virtual tmp<Field<Type> > valueBoundaryCoeffs
			(
				const tmp<scalarField>&
			) const;

			//- Return the matrix diagonal coefficients corresponding to the
			//  evaluation of the gradient of this patchField
			virtual tmp<Field<Type> > gradientInternalCoeffs() const;

			//- Return the matrix source coefficients corresponding to the
			//  evaluation of the gradient of this patchField
			virtual tmp<Field<Type> > gradientBoundaryCoeffs() const;


		// Coupled interface functionality

			//- Transform given patch component field
			virtual void transformCoupleField
			(
				scalarField& f,
				const direction cmpt
			) const = 0;

			//- Update result field based on interface functionality
			virtual void updateInterfaceMatrix
			(
				const scalarField& psiInternal,
				scalarField& result,
				const lduMatrix&,
				const scalarField& coeffs,
				const direction,
				const Pstream::commsTypes commsType,
				const bool switchToLhs
			) const = 0;


		// Block coupled interface functionality

			//- Transform given patch field
			virtual void transformCoupleField
			(
				Field<Type>& f
			) const
			{
				notImplemented
				(
					"coupledFvPatchField<Type>::transformCoupleField"
					"(Field<Type>& f) const"
				);
			}

			//- Initialise neighbour matrix update
			virtual void initInterfaceMatrixUpdate
			(
				const Field<Type>&,
				Field<Type>&,
				const BlockLduMatrix<Type>&,
				const CoeffField<Type>&,
				const Pstream::commsTypes commsType,
				const bool switchToLhs
			) const
			{}

			//- Update result field based on interface functionality
			virtual void updateInterfaceMatrix
			(
				const Field<Type>&,
				Field<Type>&,
				const BlockLduMatrix<Type>&,
				const CoeffField<Type>&,
				const Pstream::commsTypes commsType,
				const bool switchToLhs
			) const
			{
				notImplemented
				(
					"coupledFvPatchField<Type>::updateInterfaceMatrix"
				);
			}


		//- Write
		virtual void write(Ostream&) const;
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#ifdef NoRepository
#	include "coupledFvPatchField.C"
#endif

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
