/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | foam-extend: Open Source CFD
   \\    /   O peration     | Version:     4.1
    \\  /    A nd           | Web:         http://www.foam-extend.org
     \\/     M anipulation  | For copyright notice see file Copyright
-------------------------------------------------------------------------------
License
	This file is part of foam-extend.

	foam-extend is free software: you can redistribute it and/or modify it
	under the terms of the GNU General Public License as published by the
	Free Software Foundation, either version 3 of the License, or (at your
	option) any later version.

	foam-extend is distributed in the hope that it will be useful, but
	WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with foam-extend.  If not, see <http://www.gnu.org/licenses/>.

Class
	Foam::fv::correctedSnGrad

Description
	Simple central-difference snGrad scheme with non-orthogonal correction.

SourceFiles
	correctedSnGrad.C

\*---------------------------------------------------------------------------*/

#ifndef correctedSnGrad_H
#define correctedSnGrad_H

#include "snGradScheme.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace fv
{


template<class Type>
class correctedSnGrad
:
	public snGradScheme<Type>
{
	// Private Member Functions

		//- Disallow default bitwise assignment
		void operator=(const correctedSnGrad&);


public:

	//- Runtime type information
	TypeName("corrected");


	// Constructors

		//- Construct from mesh
		correctedSnGrad(const fvMesh& mesh)
		:
			snGradScheme<Type>(mesh)
		{}


		//- Construct from mesh and data stream
		correctedSnGrad(const fvMesh& mesh, Istream&)
		:
			snGradScheme<Type>(mesh)
		{}


	//- Destructor
	virtual ~correctedSnGrad();


	// Member Functions

		//- Return the interpolation weighting factors for the given field
		virtual tmp<surfaceScalarField> deltaCoeffs
		(
			const GeometricField<Type, fvPatchField, volMesh>&
		) const
		{
			return this->mesh().deltaCoeffs();
		}

		//- Return true if this scheme uses an explicit correction
		virtual bool corrected() const
		{
			return !this->mesh().orthogonal();
		}

		//- Return the explicit correction to the correctedSnGrad
		//  for the given field using the gradient of the field
		//  This is needed for use of cached gradient when possible
		//  HJ, 6/May/2016
		tmp<GeometricField<Type, fvsPatchField, surfaceMesh> >
		fullGradCorrection
		(
			const GeometricField<Type, fvPatchField, volMesh>&
		) const;

		//- Return the explicit correction to the correctedSnGrad
		//  for the given field using the gradients of the field components
		virtual tmp<GeometricField<Type, fvsPatchField, surfaceMesh> >
		correction(const GeometricField<Type, fvPatchField, volMesh>&) const;
};


// * * * * * * * * Template Member Function Specialisations  * * * * * * * * //

//  This is needed for use of cached gradient when possible
//  HJ, 6/May/2016
template<>
tmp<surfaceScalarField> correctedSnGrad<scalar>::correction
(
	const volScalarField& vsf
) const;


template<>
tmp<surfaceVectorField> correctedSnGrad<vector>::correction
(
	const volVectorField& vvf
) const;


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace fv

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#ifdef NoRepository
#	include "correctedSnGrad.C"
#endif

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
