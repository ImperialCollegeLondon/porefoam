/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | foam-extend: Open Source CFD
   \\    /   O peration     | Version:     4.1
    \\  /    A nd           | Web:         http://www.foam-extend.org
     \\/     M anipulation  | For copyright notice see file Copyright
-------------------------------------------------------------------------------
License
	This file is part of foam-extend.

	foam-extend is free software: you can redistribute it and/or modify it
	under the terms of the GNU General Public License as published by the
	Free Software Foundation, either version 3 of the License, or (at your
	option) any later version.

	foam-extend is distributed in the hope that it will be useful, but
	WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with foam-extend.  If not, see <http://www.gnu.org/licenses/>.

Class
	Foam::fv::cellLimitedGrad

Description
	cellLimitedGrad gradient scheme applied to a runTime selected base gradient
	scheme.

	The scalar limiter based on limiting the extrapolated face values
	between the maximum and minumum cell and cell neighbour values and is
	applied to all components of the gradient.

SourceFiles
	cellLimitedGrad.C

\*---------------------------------------------------------------------------*/

#ifndef cellLimitedGrad_H
#define cellLimitedGrad_H

#include "gradScheme.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace fv
{


template<class Type>
class cellLimitedGrad
:
	public fv::gradScheme<Type>
{
	// Private Data

		tmp<fv::gradScheme<Type> > basicGradScheme_;

		//- Limiter coefficient
		const scalar k_;


	// Private Member Functions

		//- Disallow default bitwise copy construct
		cellLimitedGrad(const cellLimitedGrad&);

		//- Disallow default bitwise assignment
		void operator=(const cellLimitedGrad&);


public:

	//- RunTime type information
	TypeName("cellLimited");


	// Constructors

		//- Construct from mesh and schemeData
		cellLimitedGrad(const fvMesh& mesh, Istream& schemeData)
		:
			gradScheme<Type>(mesh),
			basicGradScheme_(fv::gradScheme<Type>::New(mesh, schemeData)),
			k_(readScalar(schemeData))
		{
			if (k_ < 0 || k_ > 1)
			{
				FatalIOErrorIn
				(
					"cellLimitedGrad(const fvMesh& mesh, Istream& schemeData)",
					schemeData
				)   << "coefficient = " << k_
					<< " should be >= 0 and <= 1"
					<< exit(FatalIOError);
			}
		}


	// Member Functions

		static inline void limitFace
		(
			Type& limiter,
			const Type& maxDelta,
			const Type& minDelta,
			const Type& extrapolate
		);


		//- Return the gradient of the given field to the gradScheme::grad
		//  for optional caching
		tmp
		<
			GeometricField
			<typename outerProduct<vector, Type>::type, fvPatchField, volMesh>
		> calcGrad
		(
			const GeometricField<Type, fvPatchField, volMesh>& vsf,
			const word& name
		) const;


		//- Return the BlockLduSystem corresponding to the implicit cell
		//  limited grad discretization.  For block coupled systems.
		tmp
		<
			BlockLduSystem<vector, typename outerProduct<vector, Type>::type>
		> fvmGrad
		(
			const GeometricField<Type, fvPatchField, volMesh>&
		) const;
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace fv

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
