/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | foam-extend: Open Source CFD
   \\    /   O peration     | Version:     4.1
    \\  /    A nd           | Web:         http://www.foam-extend.org
     \\/     M anipulation  | For copyright notice see file Copyright
-------------------------------------------------------------------------------
License
	This file is part of foam-extend.

	foam-extend is free software: you can redistribute it and/or modify it
	under the terms of the GNU General Public License as published by the
	Free Software Foundation, either version 3 of the License, or (at your
	option) any later version.

	foam-extend is distributed in the hope that it will be useful, but
	WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with foam-extend.  If not, see <http://www.gnu.org/licenses/>.

Class
	Foam::twoPhaseMixture

Description
	A two-phase incompressible transportModel

SourceFiles
	twoPhaseMixture.C

\*---------------------------------------------------------------------------*/

#ifndef twoPhaseMixture_H
#define twoPhaseMixture_H

#include "../transportModel/transportModel.H"
#include "../viscosityModels/viscosityModel/viscosityModel.H"
#include "dimensionedScalar.H"
#include "volFields.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{


class twoPhaseMixture
:
	public transportModel
{
protected:

	// Protected data

		word phase1Name_;
		word phase2Name_;

		autoPtr<viscosityModel> nuModel1_;
		autoPtr<viscosityModel> nuModel2_;

		dimensionedScalar rho1_;
		dimensionedScalar rho2_;

		const volVectorField& U_;
		const surfaceScalarField& phi_;

		const volScalarField& alpha1_;

		volScalarField nu_;


	// Private Member Functions

		//- Get phase name (backward compatibility)
		word getPhaseName(const word& key) const;

		//- Calculate and return the laminar viscosity
		void calcNu();


public:

	// Constructors

		//- Construct from components
		twoPhaseMixture
		(
			const volVectorField& U,
			const surfaceScalarField& phi,
			const word& alpha1Name = "alpha1"
		);


	// Destructor

		virtual ~twoPhaseMixture()
		{}


	// Member Functions

		const word& phase1Name() const
		{
			return phase1Name_;
		}

		const word& phase2Name() const
		{
			return phase2Name_;
		}

		//- Return const-access to phase1 viscosityModel
		const viscosityModel& nuModel1() const
		{
			return nuModel1_();
		}

		//- Return const-access to phase2 viscosityModel
		const viscosityModel& nuModel2() const
		{
			return nuModel2_();
		}

		//- Return const-access to phase1 density
		const dimensionedScalar& rho1() const
		{
			return rho1_;
		}

		//- Return const-access to phase2 density
		const dimensionedScalar& rho2() const
		{
			return rho2_;
		};

		//- Return the density
		tmp<volScalarField> rho() const;

		//- Return the dynamic laminar viscosity
		tmp<volScalarField> mu() const;

		//- Return the face-interpolated dynamic laminar viscosity
		tmp<surfaceScalarField> muf() const;

		//- Return the kinematic laminar viscosity
		virtual const volScalarField& nu() const
		{
			return nu_;
		}

		//- Return the face-interpolated dynamic laminar viscosity
		tmp<surfaceScalarField> nuf() const;

		//- Correct the laminar viscosity
		virtual void correct()
		{
			calcNu();
		}

		//- Read base transportProperties dictionary
		virtual bool read();
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
