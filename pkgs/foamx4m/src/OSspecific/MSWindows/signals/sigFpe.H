/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | foam-extend: Open Source CFD
   \\    /   O peration     | Version:     4.1
    \\  /    A nd           | Web:         http://www.foam-extend.org
     \\/     M anipulation  | For copyright notice see file Copyright
-------------------------------------------------------------------------------
License
	This file is part of foam-extend.

	foam-extend is free software: you can redistribute it and/or modify it
	under the terms of the GNU General Public License as published by the
	Free Software Foundation, either version 3 of the License, or (at your
	option) any later version.

	foam-extend is distributed in the hope that it will be useful, but
	WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with foam-extend.  If not, see <http://www.gnu.org/licenses/>.

Class
	Foam::sigFpe

Description
	Set up trapping for floating point exceptions (signal FPE).

	Controlled by two env vars:
	@param FOAM_SIGFPE \n
		exception trapping
	@param FOAM_SETNAN \n
		initialization of all malloced memory to NaN. If FOAM_SIGFPE
		also set, this will cause usage of uninitialized scalars to trigger
		an abort.

SourceFiles
	sigFpe.C

\*---------------------------------------------------------------------------*/

#ifndef sigFpe_H
#define sigFpe_H

#include "OSspecific.H"
#include <signal.h>

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{


class sigFpe
{
	// Private data

		//- Saved old signal trapping setting
		static __p_sig_fn_t oldAction_;


	// Static data members

		//- Handler for caught signals
		static void sigFpeHandler(int);

public:


	// Constructors

		sigFpe();


	// Destructor

		~sigFpe();


	// Member functions

		void set(const bool verbose);
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
