/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | foam-extend: Open Source CFD
   \\    /   O peration     | Version:     4.0
    \\  /    A nd           | Web:         http://www.foam-extend.org
     \\/     M anipulation  | For copyright notice see file Copyright
-------------------------------------------------------------------------------
License
	This file is part of foam-extend.

	foam-extend is free software: you can redistribute it and/or modify it
	under the terms of the GNU General Public License as published by the
	Free Software Foundation, either version 3 of the License, or (at your
	option) any later version.

	foam-extend is distributed in the hope that it will be useful, but
	WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with foam-extend.  If not, see <http://www.gnu.org/licenses/>.

Class
	Foam::ThermoCloud

Description
	Templated base class for thermodynamic cloud

	- Adds to kinematic cloud
	  - Heat transfer

SourceFiles
	ThermoCloudTemplateI.H
	ThermoCloudTemplate.C

\*---------------------------------------------------------------------------*/

#ifndef ThermoCloudTemplate_H
#define ThermoCloudTemplate_H

#include "KinematicCloudTemplate.H"
#include "thermoCloud.H"
#include "basicThermo.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

// Forward declaration of classes

template<class CloudType>
class HeatTransferModel;


template<class ParcelType>
class ThermoCloud
:
	public KinematicCloud<ParcelType>,
	public thermoCloud
{
	// Private Member Functions

		//- Disallow default bitwise copy construct
		ThermoCloud(const ThermoCloud&);

		//- Disallow default bitwise assignment
		void operator=(const ThermoCloud&);


protected:

	// Protected data

		//- Thermo parcel constant properties
		typename ParcelType::constantProperties constProps_;


		// References to the carrier gas fields

			//- Thermodynamics package (basic)
			basicThermo& carrierThermo_;


		// References to the cloud sub-models

			//- Heat transfer model
			autoPtr<HeatTransferModel<ThermoCloud<ParcelType> > >
				heatTransferModel_;


		// Reference to the particle integration schemes

			//- Temperature integration
			autoPtr<scalarIntegrationScheme> TIntegrator_;


		// Modelling options

			//- Include radiation
			Switch radiation_;


		// Sources

			//- Sensible enthalpy transfer [J/kg]
			DimensionedField<scalar, volMesh> hsTrans_;


	// Protected member functions

		// Cloud evolution functions

			//- Pre-evolve
			void preEvolve();

			//- Evolve the cloud
			void evolveCloud();

			//- Post-evolve
			void postEvolve();


public:

	// Constructors

		//- Construct given carrier gas fields
		ThermoCloud
		(
			const word& cloudName,
			const volScalarField& rho,
			const volVectorField& U,
			const dimensionedVector& g,
			basicThermo& thermo,
			bool readFields = true
		);


	//- Destructor
	virtual ~ThermoCloud();


	//- Type of parcel the cloud was instantiated for
	typedef ParcelType parcelType;


	// Member Functions

		// Access

			//- Return the constant properties
			inline const typename ParcelType::constantProperties&
				constProps() const;

			//- Return const access to thermo package
			inline const basicThermo& carrierThermo() const;

			//- Return access to thermo package
			inline basicThermo& carrierThermo();


			// Sub-models

				//- Return reference to heat transfer model
				inline const HeatTransferModel<ThermoCloud<ParcelType> >&
					heatTransfer() const;


			// Integration schemes

				//-Return reference to velocity integration
				inline const scalarIntegrationScheme& TIntegrator() const;


			// Modelling options

				 //- Radiation flag
				inline bool radiation() const;


			// Sources

				// Enthalpy

					//- Sensible enthalpy transfer [J/kg]
					inline DimensionedField<scalar, volMesh>& hsTrans();

					//- Return enthalpy source [J/kg/m3/s]
					inline tmp<DimensionedField<scalar, volMesh> > Sh() const;


				// Radiation - overrides thermoCloud virtual abstract members

					//- Return tmp equivalent particulate emission
					inline tmp<volScalarField> Ep() const;

					//- Return tmp equivalent particulate absorption
					inline tmp<volScalarField> ap() const;

					//- Return tmp equivalent particulate scattering factor
					inline tmp<volScalarField> sigmap() const;


		// Check

			//- Print cloud information
			void info() const;


		// Cloud evolution functions

			//- Check parcel properties
			void checkParcelProperties
			(
				ParcelType& parcel,
				const scalar lagrangianDt,
				const bool fullyDescribed
			);

			//- Reset the spray source terms
			void resetSourceTerms();

			//- Evolve the spray (inject, move)
			void evolve();
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#include "ThermoCloudTemplateI.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#ifdef NoRepository
#	include "ThermoCloudTemplate.C"
#endif

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
