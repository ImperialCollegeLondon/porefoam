/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | foam-extend: Open Source CFD
   \\    /   O peration     | Version:     4.0
    \\  /    A nd           | Web:         http://www.foam-extend.org
     \\/     M anipulation  | For copyright notice see file Copyright
-------------------------------------------------------------------------------
License
	This file is part of foam-extend.

	foam-extend is free software: you can redistribute it and/or modify it
	under the terms of the GNU General Public License as published by the
	Free Software Foundation, either version 3 of the License, or (at your
	option) any later version.

	foam-extend is distributed in the hope that it will be useful, but
	WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with foam-extend.  If not, see <http://www.gnu.org/licenses/>.

Class
	Foam::KinematicParcel

Description
	Kinematic parcel class with one/two-way coupling with the continuous
	phase.

	Sub-models include:
	- drag
	- turbulent dispersion
	- wall interactions

SourceFiles
	KinematicParcelI.H
	KinematicParcel.C
	KinematicParcelIO.C

\*---------------------------------------------------------------------------*/

#ifndef KinematicParcel_H
#define KinematicParcel_H

#include "Particle.H"
#include "IOstream.H"
#include "autoPtr.H"
#include "interpolationCellPoint.H"
#include "contiguous.H"

#include "KinematicCloudTemplate.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

template<class ParcelType>
class KinematicParcel;

// Forward declaration of friend functions

template<class ParcelType>
Ostream& operator<<
(
	Ostream&,
	const KinematicParcel<ParcelType>&
);


template<class ParcelType>
class KinematicParcel
:
	public Particle<ParcelType>
{
public:

	//- Class to hold kinematic particle constant properties
	class constantProperties
	{
		// Private data

			//- Constant properties dictionary
			const dictionary dict_;

			//- Minimum density [kg/m3]
			const scalar rhoMin_;

			//- Particle density [kg/m3] (constant)
			const scalar rho0_;

			//- Minimum particle mass [kg]
			const scalar minParticleMass_;


	public:

		//- Constructor
		constantProperties(const dictionary& parentDict);

		// Member functions

			//- Return const access to the constant properties dictionary
			inline const dictionary& dict() const;

			//- Return const access to the minimum density
			inline scalar rhoMin() const;

			//- Return const access to the particle density
			inline scalar rho0() const;

			//- Return const access to the minimum particle mass
			inline scalar minParticleMass() const;
	};


	//- Class used to pass kinematic tracking data to the trackToFace function
	class trackData
	:
		public Particle<ParcelType>::trackData
	{
		// Private data

			//- Reference to the cloud containing this particle
			KinematicCloud<ParcelType>& cloud_;

			//- Particle constant properties
			const constantProperties& constProps_;


			// Interpolators for continuous phase fields

				//- Density interpolator
				const interpolation<scalar>& rhoInterp_;

				//- Velocity interpolator
				const interpolation<vector>& UInterp_;

				//- Dynamic viscosity interpolator
				const interpolation<scalar>& muInterp_;

			//- Local gravitational or other body-force acceleration
			const vector& g_;


   public:

		// Constructors

		   //- Construct from components
		   inline trackData
			(
				KinematicCloud<ParcelType>& cloud,
				const constantProperties& constProps,
				const interpolation<scalar>& rhoInterp,
				const interpolation<vector>& UInterp,
				const interpolation<scalar>& muInterp,
				const vector& g
			);


		// Member functions

			//- Return access to the owner cloud
			inline KinematicCloud<ParcelType>& cloud();

			//- Return const access to the constant properties
			inline const constantProperties& constProps() const;

			//- Return conat access to the interpolator for continuous
			//  phase density field
			inline const interpolation<scalar>& rhoInterp() const;

			//- Return conat access to the interpolator for continuous
			//  phase velocity field
			inline const interpolation<vector>& UInterp() const;

			//- Return conat access to the interpolator for continuous
			//  phase dynamic viscosity field
			inline const interpolation<scalar>& muInterp() const;

			// Return const access to the gravitational acceleration vector
			inline const vector& g() const;
	};


protected:

	// Protected data

		// Parcel properties

			//- Parcel type id
			label typeId_;

			//- Number of particles in Parcel
			scalar nParticle_;

			//- Diameter [m]
			scalar d_;

			//- Velocity of Parcel [m/s]
			vector U_;

			//- Density [kg/m3]
			scalar rho_;

			//- Time spent in turbulent eddy [s]
			scalar tTurb_;

			//- Turbulent velocity fluctuation [m/s]
			vector UTurb_;


		// Cell-based quantities

			//- Density [kg/m3]
			scalar rhoc_;

			//- Velocity [m/s]
			vector Uc_;

			//- Viscosity [Pa.s]
			scalar muc_;


	// Protected member functions

		//- Calculate new particle velocity
		template<class TrackData>
		const vector calcVelocity
		(
			TrackData& td,
			const scalar dt,		   // timestep
			const label cellI,		 // owner cell
			const scalar Re,		   // Reynolds number
			const scalar mu,		   // local carrier viscosity
			const scalar d,			// diameter
			const vector& U,		   // velocity
			const scalar rho,		  // density
			const scalar mass,		 // mass
			const vector& Su,		  // explicit particle momentum source
			vector& dUTrans			// momentum transfer to carrier
		) const;


public:

	// Static data members

		//- String representation of properties
		static string propHeader;

		//- Runtime type information
		TypeName("KinematicParcel");


	friend class Cloud<ParcelType>;


	// Constructors

		//- Construct from owner, position, and cloud owner
		//  Other properties initialised as null
		inline KinematicParcel
		(
			KinematicCloud<ParcelType>& owner,
			const vector& position,
			const label cellI
		);

		//- Construct from components
		inline KinematicParcel
		(
			KinematicCloud<ParcelType>& owner,
			const vector& position,
			const label cellI,
			const label typeId,
			const scalar nParticle0,
			const scalar d0,
			const vector& U0,
			const constantProperties& constProps
		);

		//- Construct from Istream
		KinematicParcel
		(
			const Cloud<ParcelType>& c,
			Istream& is,
			bool readFields = true
		);

		//- Construct as a copy
		KinematicParcel(const KinematicParcel& p);

		//- Construct and return a clone
		autoPtr<KinematicParcel> clone() const
		{
			return autoPtr<KinematicParcel>(new KinematicParcel(*this));
		}


	// Member Functions

		// Access

			//- Return const access to type id
			inline label typeId() const;

			//- Return const access to number of particles
			inline scalar nParticle() const;

			//- Return const access to diameter
			inline scalar d() const;

			//- Return const access to velocity
			inline const vector& U() const;

			//- Return const access to density
			inline scalar rho() const;

			//- Return const access to time spent in turbulent eddy
			inline scalar tTurb() const;

			//- Return const access to turbulent velocity fluctuation
			inline const vector& UTurb() const;


		// Edit

			//- Return access to type id
			inline label typeId();

			//- Return access to number of particles
			inline scalar& nParticle();

			//- Return access to diameter
			inline scalar& d();

			//- Return access to velocity
			inline vector& U();

			//- Return access to density
			inline scalar& rho();

			//- Return access to time spent in turbulent eddy
			inline scalar& tTurb();

			//- Return access to turbulent velocity fluctuation
			inline vector& UTurb();


		// Helper functions

			//- The nearest distance to a wall that
			//  the particle can be in the n direction
			inline scalar wallImpactDistance(const vector& n) const;

			//- Return the index of the face to be used in the interpolation
			//  routine
			inline label faceInterpolation() const;

			//- Cell owner mass
			inline scalar massCell(const label cellI) const;

			//- Particle mass
			inline scalar mass() const;

			//- Particle volume
			inline scalar volume() const;

			//- Particle volume for a given diameter
			inline scalar volume(const scalar d) const;

			//- Particle projected area
			inline scalar areaP() const;

			//- Projected area for given diameter
			inline scalar areaP(const scalar d) const;

			//- Particle surface area
			inline scalar areaS() const;

			//- Surface area for given diameter
			inline scalar areaS(const scalar d) const;

			//- Reynolds number
			inline scalar Re
			(
				const vector& U,		// particle velocity
				const scalar d,		 // particle diameter
				const scalar rhoc,	  // carrier density
				const scalar muc		// carrier dynamic viscosity
			) const;


		// Main calculation loop

			//- Set cell values
			template<class TrackData>
			void setCellValues
			(
				TrackData& td,
				const scalar dt,
				const label cellI
			);

			//- Correct cell values using latest transfer information
			template<class TrackData>
			void cellValueSourceCorrection
			(
				TrackData& td,
				const scalar dt,
				const label cellI
			);

			//- Update parcel properties over the time interval
			template<class TrackData>
			void calc
			(
				TrackData& td,
				const scalar dt,
				const label cellI
			);


		// Tracking

			//- Move the parcel
			template<class TrackData>
			bool move(TrackData& td);


		// Patch interactions

			//- Overridable function to handle the particle hitting a patch
			//  Executed before other patch-hitting functions
			template<class TrackData>
			bool hitPatch
			(
				const polyPatch& p,
				TrackData& td,
				const label patchI
			);


			//- Overridable function to handle the particle hitting a patch
			//  Executed before other patch-hitting functions without trackData
			bool hitPatch
			(
				const polyPatch& p,
				int& td,
				const label patchI
			);


			//- Overridable function to handle the particle hitting a
			//  processorPatch
			template<class TrackData>
			void hitProcessorPatch
			(
				const processorPolyPatch&,
				TrackData& td
			);

			//- Overridable function to handle the particle hitting a
			//  processorPatch without trackData
			void hitProcessorPatch
			(
				const processorPolyPatch&,
				int&
			);

			//- Overridable function to handle the particle hitting a wallPatch
			template<class TrackData>
			void hitWallPatch
			(
				const wallPolyPatch&,
				TrackData& td
			);

			//- Overridable function to handle the particle hitting a wallPatch
			//  without trackData
			void hitWallPatch
			(
				const wallPolyPatch&,
				int&
			);

			//- Overridable function to handle the particle hitting a polyPatch
			template<class TrackData>
			void hitPatch
			(
				const polyPatch&,
				TrackData& td
			);

			//- Overridable function to handle the particle hitting a polyPatch
			//- without trackData
			void hitPatch
			(
				const polyPatch&,
				int&
			);

			//- Transform the physical properties of the particle
			//  according to the given transformation tensor
			void transformProperties(const tensor& T);

			//- Transform the physical properties of the particle
			//  according to the given separation vector
			void transformProperties(const vector& separation);


		// I-O

			//- Read
			static void readFields(Cloud<ParcelType>& c);

			//- Write
			static void writeFields(const Cloud<ParcelType>& c);


	// Ostream Operator

		friend Ostream& operator<< <ParcelType>
		(
			Ostream&,
			const KinematicParcel<ParcelType>&
		);
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#include "KinematicParcelI.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#define defineParcelTypeNameAndDebug(Type, DebugSwitch)					   \
	template<>																\
	const Foam::word KinematicParcel<Type>::typeName(#Type);				  \
	template<>																\
	Foam::debug::debugSwitch												  \
	KinematicParcel<Type>::debug											  \
	(																		 \
		std::string(#Type), DebugSwitch									   \
	);

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#ifdef NoRepository
	#include "KinematicParcel.C"
#endif

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //

