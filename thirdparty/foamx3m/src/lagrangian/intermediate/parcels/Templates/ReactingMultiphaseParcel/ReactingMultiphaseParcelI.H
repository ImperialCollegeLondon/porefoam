/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | foam-extend: Open Source CFD
   \\    /   O peration     | Version:     4.0
    \\  /    A nd           | Web:         http://www.foam-extend.org
     \\/     M anipulation  | For copyright notice see file Copyright
-------------------------------------------------------------------------------
License
	This file is part of foam-extend.

	foam-extend is free software: you can redistribute it and/or modify it
	under the terms of the GNU General Public License as published by the
	Free Software Foundation, either version 3 of the License, or (at your
	option) any later version.

	foam-extend is distributed in the hope that it will be useful, but
	WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with foam-extend.  If not, see <http://www.gnu.org/licenses/>.

\*---------------------------------------------------------------------------*/

// * * * * * * * * * * * * * * * * Constructors  * * * * * * * * * * * * * * //

template<class ParcelType>
inline Foam::ReactingMultiphaseParcel<ParcelType>::constantProperties::
constantProperties
(
	const dictionary& parentDict
)
:
	ReactingParcel<ParcelType>::constantProperties(parentDict),
	LDevol_(dimensionedScalar(this->dict().lookup("LDevol")).value()),
	hRetentionCoeff_
	(
		dimensionedScalar(this->dict().lookup("hRetentionCoeff")).value()
	)
{
	if ((hRetentionCoeff_ < 0) || (hRetentionCoeff_ > 1))
	{
		FatalErrorIn
		(
			"ReactingMultiphaseParcel<ParcelType>::constantProperties::"
			"constantProperties"
		)   << "hRetentionCoeff must be in the range 0 to 1" << nl
			<< exit(FatalError) << endl;
	}

	hRetentionCoeff_ = max(1e-06, hRetentionCoeff_);
}


template<class ParcelType>
inline Foam::ReactingMultiphaseParcel<ParcelType>::trackData::trackData
(
	ReactingMultiphaseCloud<ParcelType>& cloud,
	const constantProperties& constProps,
	const interpolation<scalar>& rhoInterp,
	const interpolation<vector>& UInterp,
	const interpolation<scalar>& muInterp,
	const interpolation<scalar>& TInterp,
	const interpolation<scalar>& CpInterp,
	const interpolation<scalar>& pInterp,
	const vector& g
)
:
	ReactingParcel<ParcelType>::trackData
	(
		cloud,
		constProps,
		rhoInterp,
		UInterp,
		muInterp,
		TInterp,
		CpInterp,
		pInterp,
		g
	),
	cloud_(cloud),
	constProps_(constProps)
{}


template <class ParcelType>
inline Foam::ReactingMultiphaseParcel<ParcelType>::ReactingMultiphaseParcel
(
	ReactingMultiphaseCloud<ParcelType>& owner,
	const vector& position,
	const label cellI
)
:
	ReactingParcel<ParcelType>(owner, position, cellI),
	YGas_(0),
	YLiquid_(0),
	YSolid_(0),
	canCombust_(false)
{}


template<class ParcelType>
inline Foam::ReactingMultiphaseParcel<ParcelType>::ReactingMultiphaseParcel
(
	ReactingMultiphaseCloud<ParcelType>& owner,
	const vector& position,
	const label cellI,
	const label typeId,
	const scalar nParticle0,
	const scalar d0,
	const vector& U0,
	const scalarField& Y0,
	const scalarField& YGas0,
	const scalarField& YLiquid0,
	const scalarField& YSolid0,
	const constantProperties& constProps
)
:
	ReactingParcel<ParcelType>
	(
		owner,
		position,
		cellI,
		typeId,
		nParticle0,
		d0,
		U0,
		Y0,
		constProps
	),
	YGas_(YGas0),
	YLiquid_(YLiquid0),
	YSolid_(YSolid0),
	canCombust_(false)
{}


// * * * * * * * * * constantProperties Member Functions * * * * * * * * * * //

template<class ParcelType>
inline Foam::scalar
Foam::ReactingMultiphaseParcel<ParcelType>::constantProperties::LDevol() const
{
	return LDevol_;
}


template<class ParcelType>
inline Foam::scalar
Foam::ReactingMultiphaseParcel<ParcelType>::constantProperties::
hRetentionCoeff() const
{
	return hRetentionCoeff_;
}


// * * * * * * * * * * * trackData Member Functions  * * * * * * * * * * * * //

template<class ParcelType>
inline Foam::ReactingMultiphaseCloud<ParcelType>&
Foam::ReactingMultiphaseParcel<ParcelType>::trackData::cloud()
{
	return cloud_;
}


template<class ParcelType>
inline const typename Foam::ReactingMultiphaseParcel<ParcelType>::
constantProperties&
Foam::ReactingMultiphaseParcel<ParcelType>::trackData::constProps() const
{
	return constProps_;
}


// * * * * * * * * * * ThermoParcel Member Functions * * * * * * * * * * * * //

template<class ParcelType>
inline const Foam::scalarField& Foam::ReactingMultiphaseParcel<ParcelType>::
YGas() const
{
	return YGas_;
}


template<class ParcelType>
inline const Foam::scalarField& Foam::ReactingMultiphaseParcel<ParcelType>::
YLiquid() const
{
	return YLiquid_;
}


template<class ParcelType>
inline const Foam::scalarField& Foam::ReactingMultiphaseParcel<ParcelType>::
YSolid() const
{
	return YSolid_;
}


template<class ParcelType>
inline bool Foam::ReactingMultiphaseParcel<ParcelType>::canCombust() const
{
	return canCombust_;
}


template<class ParcelType>
inline Foam::scalarField& Foam::ReactingMultiphaseParcel<ParcelType>::YGas()
{
	return YGas_;
}


template<class ParcelType>
inline Foam::scalarField& Foam::ReactingMultiphaseParcel<ParcelType>::YLiquid()
{
	return YLiquid_;
}


template<class ParcelType>
inline Foam::scalarField& Foam::ReactingMultiphaseParcel<ParcelType>::YSolid()
{
	return YSolid_;
}


template<class ParcelType>
inline bool& Foam::ReactingMultiphaseParcel<ParcelType>::canCombust()
{
	return canCombust_;
}

// ************************************************************************* //
